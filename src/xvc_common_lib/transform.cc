/******************************************************************************
* Copyright (C) 2017, Divideon. All rights reserved.
* No part of this code may be reproduced in any form
* without the written permission of the copyright holder.
******************************************************************************/

#include "xvc_common_lib/transform.h"

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>

#include "xvc_common_lib/intra_prediction.h"
#include "xvc_common_lib/restrictions.h"
#include "xvc_common_lib/utils.h"

#if _MSC_VER
// Disable warning 4244 in Visual Studio in order to be able to do implicit
// type conversions (without static_cast).
#pragma warning(disable:4244)
#endif

namespace xvc {

static const int16_t kInvTransform2[2][2] = {
  { 256, 256 },
  { 256, -256 },
};

static const int16_t kInvTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kInvTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kInvTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kInvTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const int16_t kInvTransform64[64][64] = {
  { 256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256 },   // NOLINT
  { 362,361,359,357,353,349,344,338,331,323,315,306,296,285,274,262,250,236,223,208,194,178,163,147,130,114,97,79,62,44,27,9,-9,-27,-44,-62,-79,-97,-114,-130,-147,-163,-178,-194,-208,-223,-236,-250,-262,-274,-285,-296,-306,-315,-323,-331,-338,-344,-349,-353,-357,-359,-361,-362 },   // NOLINT
  { 362,358,351,341,327,311,291,268,243,216,186,155,122,88,53,18,-18,-53,-88,-122,-155,-186,-216,-243,-268,-291,-311,-327,-341,-351,-358,-362,-362,-358,-351,-341,-327,-311,-291,-268,-243,-216,-186,-155,-122,-88,-53,-18,18,53,88,122,155,186,216,243,268,291,311,327,341,351,358,362 },   // NOLINT
  { 361,353,338,315,285,250,208,163,114,62,9,-44,-97,-147,-194,-236,-274,-306,-331,-349,-359,-362,-357,-344,-323,-296,-262,-223,-178,-130,-79,-27,27,79,130,178,223,262,296,323,344,357,362,359,349,331,306,274,236,194,147,97,44,-9,-62,-114,-163,-208,-250,-285,-315,-338,-353,-361 },   // NOLINT
  { 360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360,360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360 },   // NOLINT
  { 359,338,296,236,163,79,-9,-97,-178,-250,-306,-344,-361,-357,-331,-285,-223,-147,-62,27,114,194,262,315,349,362,353,323,274,208,130,44,-44,-130,-208,-274,-323,-353,-362,-349,-315,-262,-194,-114,-27,62,147,223,285,331,357,361,344,306,250,178,97,9,-79,-163,-236,-296,-338,-359 },   // NOLINT
  { 358,327,268,186,88,-18,-122,-216,-291,-341,-362,-351,-311,-243,-155,-53,53,155,243,311,351,362,341,291,216,122,18,-88,-186,-268,-327,-358,-358,-327,-268,-186,-88,18,122,216,291,341,362,351,311,243,155,53,-53,-155,-243,-311,-351,-362,-341,-291,-216,-122,-18,88,186,268,327,358 },   // NOLINT
  { 357,315,236,130,9,-114,-223,-306,-353,-359,-323,-250,-147,-27,97,208,296,349,361,331,262,163,44,-79,-194,-285,-344,-362,-338,-274,-178,-62,62,178,274,338,362,344,285,194,79,-44,-163,-262,-331,-361,-349,-296,-208,-97,27,147,250,323,359,353,306,223,114,-9,-130,-236,-315,-357 },   // NOLINT
  { 355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355 },   // NOLINT
  { 353,285,163,9,-147,-274,-349,-357,-296,-178,-27,130,262,344,359,306,194,44,-114,-250,-338,-361,-315,-208,-62,97,236,331,362,323,223,79,-79,-223,-323,-362,-331,-236,-97,62,208,315,361,338,250,114,-44,-194,-306,-359,-344,-262,-130,27,178,296,357,349,274,147,-9,-163,-285,-353 },   // NOLINT
  { 351,268,122,-53,-216,-327,-362,-311,-186,-18,155,291,358,341,243,88,-88,-243,-341,-358,-291,-155,18,186,311,362,327,216,53,-122,-268,-351,-351,-268,-122,53,216,327,362,311,186,18,-155,-291,-358,-341,-243,-88,88,243,341,358,291,155,-18,-186,-311,-362,-327,-216,-53,122,268,351 },   // NOLINT
  { 349,250,79,-114,-274,-357,-338,-223,-44,147,296,361,323,194,9,-178,-315,-362,-306,-163,27,208,331,359,285,130,-62,-236,-344,-353,-262,-97,97,262,353,344,236,62,-130,-285,-359,-331,-208,-27,163,306,362,315,178,-9,-194,-323,-361,-296,-147,44,223,338,357,274,114,-79,-250,-349 },   // NOLINT
  { 346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346,346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346 },   // NOLINT
  { 344,208,-9,-223,-349,-338,-194,27,236,353,331,178,-44,-250,-357,-323,-163,62,262,359,315,147,-79,-274,-361,-306,-130,97,285,362,296,114,-114,-296,-362,-285,-97,130,306,361,274,79,-147,-315,-359,-262,-62,163,323,357,250,44,-178,-331,-353,-236,-27,194,338,349,223,9,-208,-344 },   // NOLINT
  { 341,186,-53,-268,-362,-291,-88,155,327,351,216,-18,-243,-358,-311,-122,122,311,358,243,18,-216,-351,-327,-155,88,291,362,268,53,-186,-341,-341,-186,53,268,362,291,88,-155,-327,-351,-216,18,243,358,311,122,-122,-311,-358,-243,-18,216,351,327,155,-88,-291,-362,-268,-53,186,341 },   // NOLINT
  { 338,163,-97,-306,-357,-223,27,262,362,274,44,-208,-353,-315,-114,147,331,344,178,-79,-296,-359,-236,9,250,361,285,62,-194,-349,-323,-130,130,323,349,194,-62,-285,-361,-250,-9,236,359,296,79,-178,-344,-331,-147,114,315,353,208,-44,-274,-362,-262,-27,223,357,306,97,-163,-338 },   // NOLINT
  { 334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334 },   // NOLINT
  { 331,114,-178,-353,-296,-44,236,362,250,-27,-285,-357,-194,97,323,338,130,-163,-349,-306,-62,223,361,262,-9,-274,-359,-208,79,315,344,147,-147,-344,-315,-79,208,359,274,9,-262,-361,-223,62,306,349,163,-130,-338,-323,-97,194,357,285,27,-250,-362,-236,44,296,353,178,-114,-331 },   // NOLINT
  { 327,88,-216,-362,-243,53,311,341,122,-186,-358,-268,18,291,351,155,-155,-351,-291,-18,268,358,186,-122,-341,-311,-53,243,362,216,-88,-327,-327,-88,216,362,243,-53,-311,-341,-122,186,358,268,-18,-291,-351,-155,155,351,291,18,-268,-358,-186,122,341,311,53,-243,-362,-216,88,327 },   // NOLINT
  { 323,62,-250,-359,-178,147,353,274,-27,-306,-338,-97,223,362,208,-114,-344,-296,-9,285,349,130,-194,-361,-236,79,331,315,44,-262,-357,-163,163,357,262,-44,-315,-331,-79,236,361,194,-130,-349,-285,9,296,344,114,-208,-362,-223,97,338,306,27,-274,-353,-147,178,359,250,-62,-323 },   // NOLINT
  { 319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319,319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319 },   // NOLINT
  { 315,9,-306,-323,-27,296,331,44,-285,-338,-62,274,344,79,-262,-349,-97,250,353,114,-236,-357,-130,223,359,147,-208,-361,-163,194,362,178,-178,-362,-194,163,361,208,-147,-359,-223,130,357,236,-114,-353,-250,97,349,262,-79,-344,-274,62,338,285,-44,-331,-296,27,323,306,-9,-315 },   // NOLINT
  { 311,-18,-327,-291,53,341,268,-88,-351,-243,122,358,216,-155,-362,-186,186,362,155,-216,-358,-122,243,351,88,-268,-341,-53,291,327,18,-311,-311,18,327,291,-53,-341,-268,88,351,243,-122,-358,-216,155,362,186,-186,-362,-155,216,358,122,-243,-351,-88,268,341,53,-291,-327,-18,311 },   // NOLINT
  { 306,-44,-344,-250,130,361,178,-208,-357,-97,274,331,9,-323,-285,79,353,223,-163,-362,-147,236,349,62,-296,-315,27,338,262,-114,-359,-194,194,359,114,-262,-338,-27,315,296,-62,-349,-236,147,362,163,-223,-353,-79,285,323,-9,-331,-274,97,357,208,-178,-361,-130,250,344,44,-306 },   // NOLINT
  { 301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301 },   // NOLINT
  { 296,-97,-361,-147,262,323,-44,-353,-194,223,344,9,-338,-236,178,357,62,-315,-274,130,362,114,-285,-306,79,359,163,-250,-331,27,349,208,-208,-349,-27,331,250,-163,-359,-79,306,285,-114,-362,-130,274,315,-62,-357,-178,236,338,-9,-344,-223,194,353,44,-323,-262,147,361,97,-296 },   // NOLINT
  { 291,-122,-362,-88,311,268,-155,-358,-53,327,243,-186,-351,-18,341,216,-216,-341,18,351,186,-243,-327,53,358,155,-268,-311,88,362,122,-291,-291,122,362,88,-311,-268,155,358,53,-327,-243,186,351,18,-341,-216,216,341,-18,-351,-186,243,327,-53,-358,-155,268,311,-88,-362,-122,291 },   // NOLINT
  { 285,-147,-357,-27,344,194,-250,-315,97,362,79,-323,-236,208,338,-44,-359,-130,296,274,-163,-353,-9,349,178,-262,-306,114,361,62,-331,-223,223,331,-62,-361,-114,306,262,-178,-349,9,353,163,-274,-296,130,359,44,-338,-208,236,323,-79,-362,-97,315,250,-194,-344,27,357,147,-285 },   // NOLINT
  { 280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280,280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280 },   // NOLINT
  { 274,-194,-331,97,359,9,-357,-114,323,208,-262,-285,178,338,-79,-361,-27,353,130,-315,-223,250,296,-163,-344,62,362,44,-349,-147,306,236,-236,-306,147,349,-44,-362,-62,344,163,-296,-250,223,315,-130,-353,27,361,79,-338,-178,285,262,-208,-323,114,357,-9,-359,-97,331,194,-274 },   // NOLINT
  { 268,-216,-311,155,341,-88,-358,18,362,53,-351,-122,327,186,-291,-243,243,291,-186,-327,122,351,-53,-362,-18,358,88,-341,-155,311,216,-268,-268,216,311,-155,-341,88,358,-18,-362,-53,351,122,-327,-186,291,243,-243,-291,186,327,-122,-351,53,362,18,-358,-88,341,155,-311,-216,268 },   // NOLINT
  { 262,-236,-285,208,306,-178,-323,147,338,-114,-349,79,357,-44,-361,9,362,27,-359,-62,353,97,-344,-130,331,163,-315,-194,296,223,-274,-250,250,274,-223,-296,194,315,-163,-331,130,344,-97,-353,62,359,-27,-362,-9,361,44,-357,-79,349,114,-338,-147,323,178,-306,-208,285,236,-262 },   // NOLINT
  { 256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256 },   // NOLINT
  { 250,-274,-223,296,194,-315,-163,331,130,-344,-97,353,62,-359,-27,362,-9,-361,44,357,-79,-349,114,338,-147,-323,178,306,-208,-285,236,262,-262,-236,285,208,-306,-178,323,147,-338,-114,349,79,-357,-44,361,9,-362,27,359,-62,-353,97,344,-130,-331,163,315,-194,-296,223,274,-250 },   // NOLINT
  { 243,-291,-186,327,122,-351,-53,362,-18,-358,88,341,-155,-311,216,268,-268,-216,311,155,-341,-88,358,18,-362,53,351,-122,-327,186,291,-243,-243,291,186,-327,-122,351,53,-362,18,358,-88,-341,155,311,-216,-268,268,216,-311,-155,341,88,-358,-18,362,-53,-351,122,327,-186,-291,243 },   // NOLINT
  { 236,-306,-147,349,44,-362,62,344,-163,-296,250,223,-315,-130,353,27,-361,79,338,-178,-285,262,208,-323,-114,357,9,-359,97,331,-194,-274,274,194,-331,-97,359,-9,-357,114,323,-208,-262,285,178,-338,-79,361,-27,-353,130,315,-223,-250,296,163,-344,-62,362,-44,-349,147,306,-236 },   // NOLINT
  { 230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230,230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230 },   // NOLINT
  { 223,-331,-62,361,-114,-306,262,178,-349,-9,353,-163,-274,296,130,-359,44,338,-208,-236,323,79,-362,97,315,-250,-194,344,27,-357,147,285,-285,-147,357,-27,-344,194,250,-315,-97,362,-79,-323,236,208,-338,-44,359,-130,-296,274,163,-353,9,349,-178,-262,306,114,-361,62,331,-223 },   // NOLINT
  { 216,-341,-18,351,-186,-243,327,53,-358,155,268,-311,-88,362,-122,-291,291,122,-362,88,311,-268,-155,358,-53,-327,243,186,-351,18,341,-216,-216,341,18,-351,186,243,-327,-53,358,-155,-268,311,88,-362,122,291,-291,-122,362,-88,-311,268,155,-358,53,327,-243,-186,351,-18,-341,216 },   // NOLINT
  { 208,-349,27,331,-250,-163,359,-79,-306,285,114,-362,130,274,-315,-62,357,-178,-236,338,9,-344,223,194,-353,44,323,-262,-147,361,-97,-296,296,97,-361,147,262,-323,-44,353,-194,-223,344,-9,-338,236,178,-357,62,315,-274,-130,362,-114,-285,306,79,-359,163,250,-331,-27,349,-208 },   // NOLINT
  { 201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201 },   // NOLINT
  { 194,-359,114,262,-338,27,315,-296,-62,349,-236,-147,362,-163,-223,353,-79,-285,323,9,-331,274,97,-357,208,178,-361,130,250,-344,44,306,-306,-44,344,-250,-130,361,-178,-208,357,-97,-274,331,-9,-323,285,79,-353,223,163,-362,147,236,-349,62,296,-315,-27,338,-262,-114,359,-194 },   // NOLINT
  { 186,-362,155,216,-358,122,243,-351,88,268,-341,53,291,-327,18,311,-311,-18,327,-291,-53,341,-268,-88,351,-243,-122,358,-216,-155,362,-186,-186,362,-155,-216,358,-122,-243,351,-88,-268,341,-53,-291,327,-18,-311,311,18,-327,291,53,-341,268,88,-351,243,122,-358,216,155,-362,186 },   // NOLINT
  { 178,-362,194,163,-361,208,147,-359,223,130,-357,236,114,-353,250,97,-349,262,79,-344,274,62,-338,285,44,-331,296,27,-323,306,9,-315,315,-9,-306,323,-27,-296,331,-44,-285,338,-62,-274,344,-79,-262,349,-97,-250,353,-114,-236,357,-130,-223,359,-147,-208,361,-163,-194,362,-178 },   // NOLINT
  { 171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171,171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171 },   // NOLINT
  { 163,-357,262,44,-315,331,-79,-236,361,-194,-130,349,-285,-9,296,-344,114,208,-362,223,97,-338,306,-27,-274,353,-147,-178,359,-250,-62,323,-323,62,250,-359,178,147,-353,274,27,-306,338,-97,-223,362,-208,-114,344,-296,9,285,-349,130,194,-361,236,79,-331,315,-44,-262,357,-163 },   // NOLINT
  { 155,-351,291,-18,-268,358,-186,-122,341,-311,53,243,-362,216,88,-327,327,-88,-216,362,-243,-53,311,-341,122,186,-358,268,18,-291,351,-155,-155,351,-291,18,268,-358,186,122,-341,311,-53,-243,362,-216,-88,327,-327,88,216,-362,243,53,-311,341,-122,-186,358,-268,-18,291,-351,155 },   // NOLINT
  { 147,-344,315,-79,-208,359,-274,9,262,-361,223,62,-306,349,-163,-130,338,-323,97,194,-357,285,-27,-250,362,-236,-44,296,-353,178,114,-331,331,-114,-178,353,-296,44,236,-362,250,27,-285,357,-194,-97,323,-338,130,163,-349,306,-62,-223,361,-262,-9,274,-359,208,79,-315,344,-147 },   // NOLINT
  { 139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139 },   // NOLINT
  { 130,-323,349,-194,-62,285,-361,250,-9,-236,359,-296,79,178,-344,331,-147,-114,315,-353,208,44,-274,362,-262,27,223,-357,306,-97,-163,338,-338,163,97,-306,357,-223,-27,262,-362,274,-44,-208,353,-315,114,147,-331,344,-178,-79,296,-359,236,9,-250,361,-285,62,194,-349,323,-130 },   // NOLINT
  { 122,-311,358,-243,18,216,-351,327,-155,-88,291,-362,268,-53,-186,341,-341,186,53,-268,362,-291,88,155,-327,351,-216,-18,243,-358,311,-122,-122,311,-358,243,-18,-216,351,-327,155,88,-291,362,-268,53,186,-341,341,-186,-53,268,-362,291,-88,-155,327,-351,216,18,-243,358,-311,122 },   // NOLINT
  { 114,-296,362,-285,97,130,-306,361,-274,79,147,-315,359,-262,62,163,-323,357,-250,44,178,-331,353,-236,27,194,-338,349,-223,9,208,-344,344,-208,-9,223,-349,338,-194,-27,236,-353,331,-178,-44,250,-357,323,-163,-62,262,-359,315,-147,-79,274,-361,306,-130,-97,285,-362,296,-114 },   // NOLINT
  { 105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105,105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105 },   // NOLINT
  { 97,-262,353,-344,236,-62,-130,285,-359,331,-208,27,163,-306,362,-315,178,9,-194,323,-361,296,-147,-44,223,-338,357,-274,114,79,-250,349,-349,250,-79,-114,274,-357,338,-223,44,147,-296,361,-323,194,-9,-178,315,-362,306,-163,-27,208,-331,359,-285,130,62,-236,344,-353,262,-97 },   // NOLINT
  { 88,-243,341,-358,291,-155,-18,186,-311,362,-327,216,-53,-122,268,-351,351,-268,122,53,-216,327,-362,311,-186,18,155,-291,358,-341,243,-88,-88,243,-341,358,-291,155,18,-186,311,-362,327,-216,53,122,-268,351,-351,268,-122,-53,216,-327,362,-311,186,-18,-155,291,-358,341,-243,88 },   // NOLINT
  { 79,-223,323,-362,331,-236,97,62,-208,315,-361,338,-250,114,44,-194,306,-359,344,-262,130,27,-178,296,-357,349,-274,147,9,-163,285,-353,353,-285,163,-9,-147,274,-349,357,-296,178,-27,-130,262,-344,359,-306,194,-44,-114,250,-338,361,-315,208,-62,-97,236,-331,362,-323,223,-79 },   // NOLINT
  { 71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71 },   // NOLINT
  { 62,-178,274,-338,362,-344,285,-194,79,44,-163,262,-331,361,-349,296,-208,97,27,-147,250,-323,359,-353,306,-223,114,9,-130,236,-315,357,-357,315,-236,130,-9,-114,223,-306,353,-359,323,-250,147,-27,-97,208,-296,349,-361,331,-262,163,-44,-79,194,-285,344,-362,338,-274,178,-62 },   // NOLINT
  { 53,-155,243,-311,351,-362,341,-291,216,-122,18,88,-186,268,-327,358,-358,327,-268,186,-88,-18,122,-216,291,-341,362,-351,311,-243,155,-53,-53,155,-243,311,-351,362,-341,291,-216,122,-18,-88,186,-268,327,-358,358,-327,268,-186,88,18,-122,216,-291,341,-362,351,-311,243,-155,53 },   // NOLINT
  { 44,-130,208,-274,323,-353,362,-349,315,-262,194,-114,27,62,-147,223,-285,331,-357,361,-344,306,-250,178,-97,9,79,-163,236,-296,338,-359,359,-338,296,-236,163,-79,-9,97,-178,250,-306,344,-361,357,-331,285,-223,147,-62,-27,114,-194,262,-315,349,-362,353,-323,274,-208,130,-44 },   // NOLINT
  { 35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35,35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35 },   // NOLINT
  { 27,-79,130,-178,223,-262,296,-323,344,-357,362,-359,349,-331,306,-274,236,-194,147,-97,44,9,-62,114,-163,208,-250,285,-315,338,-353,361,-361,353,-338,315,-285,250,-208,163,-114,62,-9,-44,97,-147,194,-236,274,-306,331,-349,359,-362,357,-344,323,-296,262,-223,178,-130,79,-27 },   // NOLINT
  { 18,-53,88,-122,155,-186,216,-243,268,-291,311,-327,341,-351,358,-362,362,-358,351,-341,327,-311,291,-268,243,-216,186,-155,122,-88,53,-18,-18,53,-88,122,-155,186,-216,243,-268,291,-311,327,-341,351,-358,362,-362,358,-351,341,-327,311,-291,268,-243,216,-186,155,-122,88,-53,18 },   // NOLINT
  { 9,-27,44,-62,79,-97,114,-130,147,-163,178,-194,208,-223,236,-250,262,-274,285,-296,306,-315,323,-331,338,-344,349,-353,357,-359,361,-362,362,-361,359,-357,353,-349,344,-338,331,-323,315,-306,296,-285,274,-262,250,-236,223,-208,194,-178,163,-147,130,-114,97,-79,62,-44,27,-9 },   // NOLINT
};

static const int16_t kFwdTransform2[2][2] = {
  { 256, 256 },
  { 256, -256 },
};

static const int16_t kFwdTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kFwdTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kFwdTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kFwdTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const int16_t kFwdTransform64[64][64] = {
  { 256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256 },   // NOLINT
  { 362,361,359,357,353,349,344,338,331,323,315,306,296,285,274,262,250,236,223,208,194,178,163,147,130,114,97,79,62,44,27,9,-9,-27,-44,-62,-79,-97,-114,-130,-147,-163,-178,-194,-208,-223,-236,-250,-262,-274,-285,-296,-306,-315,-323,-331,-338,-344,-349,-353,-357,-359,-361,-362 },   // NOLINT
  { 362,358,351,341,327,311,291,268,243,216,186,155,122,88,53,18,-18,-53,-88,-122,-155,-186,-216,-243,-268,-291,-311,-327,-341,-351,-358,-362,-362,-358,-351,-341,-327,-311,-291,-268,-243,-216,-186,-155,-122,-88,-53,-18,18,53,88,122,155,186,216,243,268,291,311,327,341,351,358,362 },   // NOLINT
  { 361,353,338,315,285,250,208,163,114,62,9,-44,-97,-147,-194,-236,-274,-306,-331,-349,-359,-362,-357,-344,-323,-296,-262,-223,-178,-130,-79,-27,27,79,130,178,223,262,296,323,344,357,362,359,349,331,306,274,236,194,147,97,44,-9,-62,-114,-163,-208,-250,-285,-315,-338,-353,-361 },   // NOLINT
  { 360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360,360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360 },   // NOLINT
  { 359,338,296,236,163,79,-9,-97,-178,-250,-306,-344,-361,-357,-331,-285,-223,-147,-62,27,114,194,262,315,349,362,353,323,274,208,130,44,-44,-130,-208,-274,-323,-353,-362,-349,-315,-262,-194,-114,-27,62,147,223,285,331,357,361,344,306,250,178,97,9,-79,-163,-236,-296,-338,-359 },   // NOLINT
  { 358,327,268,186,88,-18,-122,-216,-291,-341,-362,-351,-311,-243,-155,-53,53,155,243,311,351,362,341,291,216,122,18,-88,-186,-268,-327,-358,-358,-327,-268,-186,-88,18,122,216,291,341,362,351,311,243,155,53,-53,-155,-243,-311,-351,-362,-341,-291,-216,-122,-18,88,186,268,327,358 },   // NOLINT
  { 357,315,236,130,9,-114,-223,-306,-353,-359,-323,-250,-147,-27,97,208,296,349,361,331,262,163,44,-79,-194,-285,-344,-362,-338,-274,-178,-62,62,178,274,338,362,344,285,194,79,-44,-163,-262,-331,-361,-349,-296,-208,-97,27,147,250,323,359,353,306,223,114,-9,-130,-236,-315,-357 },   // NOLINT
  { 355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355 },   // NOLINT
  { 353,285,163,9,-147,-274,-349,-357,-296,-178,-27,130,262,344,359,306,194,44,-114,-250,-338,-361,-315,-208,-62,97,236,331,362,323,223,79,-79,-223,-323,-362,-331,-236,-97,62,208,315,361,338,250,114,-44,-194,-306,-359,-344,-262,-130,27,178,296,357,349,274,147,-9,-163,-285,-353 },   // NOLINT
  { 351,268,122,-53,-216,-327,-362,-311,-186,-18,155,291,358,341,243,88,-88,-243,-341,-358,-291,-155,18,186,311,362,327,216,53,-122,-268,-351,-351,-268,-122,53,216,327,362,311,186,18,-155,-291,-358,-341,-243,-88,88,243,341,358,291,155,-18,-186,-311,-362,-327,-216,-53,122,268,351 },   // NOLINT
  { 349,250,79,-114,-274,-357,-338,-223,-44,147,296,361,323,194,9,-178,-315,-362,-306,-163,27,208,331,359,285,130,-62,-236,-344,-353,-262,-97,97,262,353,344,236,62,-130,-285,-359,-331,-208,-27,163,306,362,315,178,-9,-194,-323,-361,-296,-147,44,223,338,357,274,114,-79,-250,-349 },   // NOLINT
  { 346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346,346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346 },   // NOLINT
  { 344,208,-9,-223,-349,-338,-194,27,236,353,331,178,-44,-250,-357,-323,-163,62,262,359,315,147,-79,-274,-361,-306,-130,97,285,362,296,114,-114,-296,-362,-285,-97,130,306,361,274,79,-147,-315,-359,-262,-62,163,323,357,250,44,-178,-331,-353,-236,-27,194,338,349,223,9,-208,-344 },   // NOLINT
  { 341,186,-53,-268,-362,-291,-88,155,327,351,216,-18,-243,-358,-311,-122,122,311,358,243,18,-216,-351,-327,-155,88,291,362,268,53,-186,-341,-341,-186,53,268,362,291,88,-155,-327,-351,-216,18,243,358,311,122,-122,-311,-358,-243,-18,216,351,327,155,-88,-291,-362,-268,-53,186,341 },   // NOLINT
  { 338,163,-97,-306,-357,-223,27,262,362,274,44,-208,-353,-315,-114,147,331,344,178,-79,-296,-359,-236,9,250,361,285,62,-194,-349,-323,-130,130,323,349,194,-62,-285,-361,-250,-9,236,359,296,79,-178,-344,-331,-147,114,315,353,208,-44,-274,-362,-262,-27,223,357,306,97,-163,-338 },   // NOLINT
  { 334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334 },   // NOLINT
  { 331,114,-178,-353,-296,-44,236,362,250,-27,-285,-357,-194,97,323,338,130,-163,-349,-306,-62,223,361,262,-9,-274,-359,-208,79,315,344,147,-147,-344,-315,-79,208,359,274,9,-262,-361,-223,62,306,349,163,-130,-338,-323,-97,194,357,285,27,-250,-362,-236,44,296,353,178,-114,-331 },   // NOLINT
  { 327,88,-216,-362,-243,53,311,341,122,-186,-358,-268,18,291,351,155,-155,-351,-291,-18,268,358,186,-122,-341,-311,-53,243,362,216,-88,-327,-327,-88,216,362,243,-53,-311,-341,-122,186,358,268,-18,-291,-351,-155,155,351,291,18,-268,-358,-186,122,341,311,53,-243,-362,-216,88,327 },   // NOLINT
  { 323,62,-250,-359,-178,147,353,274,-27,-306,-338,-97,223,362,208,-114,-344,-296,-9,285,349,130,-194,-361,-236,79,331,315,44,-262,-357,-163,163,357,262,-44,-315,-331,-79,236,361,194,-130,-349,-285,9,296,344,114,-208,-362,-223,97,338,306,27,-274,-353,-147,178,359,250,-62,-323 },   // NOLINT
  { 319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319,319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319 },   // NOLINT
  { 315,9,-306,-323,-27,296,331,44,-285,-338,-62,274,344,79,-262,-349,-97,250,353,114,-236,-357,-130,223,359,147,-208,-361,-163,194,362,178,-178,-362,-194,163,361,208,-147,-359,-223,130,357,236,-114,-353,-250,97,349,262,-79,-344,-274,62,338,285,-44,-331,-296,27,323,306,-9,-315 },   // NOLINT
  { 311,-18,-327,-291,53,341,268,-88,-351,-243,122,358,216,-155,-362,-186,186,362,155,-216,-358,-122,243,351,88,-268,-341,-53,291,327,18,-311,-311,18,327,291,-53,-341,-268,88,351,243,-122,-358,-216,155,362,186,-186,-362,-155,216,358,122,-243,-351,-88,268,341,53,-291,-327,-18,311 },   // NOLINT
  { 306,-44,-344,-250,130,361,178,-208,-357,-97,274,331,9,-323,-285,79,353,223,-163,-362,-147,236,349,62,-296,-315,27,338,262,-114,-359,-194,194,359,114,-262,-338,-27,315,296,-62,-349,-236,147,362,163,-223,-353,-79,285,323,-9,-331,-274,97,357,208,-178,-361,-130,250,344,44,-306 },   // NOLINT
  { 301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301 },   // NOLINT
  { 296,-97,-361,-147,262,323,-44,-353,-194,223,344,9,-338,-236,178,357,62,-315,-274,130,362,114,-285,-306,79,359,163,-250,-331,27,349,208,-208,-349,-27,331,250,-163,-359,-79,306,285,-114,-362,-130,274,315,-62,-357,-178,236,338,-9,-344,-223,194,353,44,-323,-262,147,361,97,-296 },   // NOLINT
  { 291,-122,-362,-88,311,268,-155,-358,-53,327,243,-186,-351,-18,341,216,-216,-341,18,351,186,-243,-327,53,358,155,-268,-311,88,362,122,-291,-291,122,362,88,-311,-268,155,358,53,-327,-243,186,351,18,-341,-216,216,341,-18,-351,-186,243,327,-53,-358,-155,268,311,-88,-362,-122,291 },   // NOLINT
  { 285,-147,-357,-27,344,194,-250,-315,97,362,79,-323,-236,208,338,-44,-359,-130,296,274,-163,-353,-9,349,178,-262,-306,114,361,62,-331,-223,223,331,-62,-361,-114,306,262,-178,-349,9,353,163,-274,-296,130,359,44,-338,-208,236,323,-79,-362,-97,315,250,-194,-344,27,357,147,-285 },   // NOLINT
  { 280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280,280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280 },   // NOLINT
  { 274,-194,-331,97,359,9,-357,-114,323,208,-262,-285,178,338,-79,-361,-27,353,130,-315,-223,250,296,-163,-344,62,362,44,-349,-147,306,236,-236,-306,147,349,-44,-362,-62,344,163,-296,-250,223,315,-130,-353,27,361,79,-338,-178,285,262,-208,-323,114,357,-9,-359,-97,331,194,-274 },   // NOLINT
  { 268,-216,-311,155,341,-88,-358,18,362,53,-351,-122,327,186,-291,-243,243,291,-186,-327,122,351,-53,-362,-18,358,88,-341,-155,311,216,-268,-268,216,311,-155,-341,88,358,-18,-362,-53,351,122,-327,-186,291,243,-243,-291,186,327,-122,-351,53,362,18,-358,-88,341,155,-311,-216,268 },   // NOLINT
  { 262,-236,-285,208,306,-178,-323,147,338,-114,-349,79,357,-44,-361,9,362,27,-359,-62,353,97,-344,-130,331,163,-315,-194,296,223,-274,-250,250,274,-223,-296,194,315,-163,-331,130,344,-97,-353,62,359,-27,-362,-9,361,44,-357,-79,349,114,-338,-147,323,178,-306,-208,285,236,-262 },   // NOLINT
  { 256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256 },   // NOLINT
  { 250,-274,-223,296,194,-315,-163,331,130,-344,-97,353,62,-359,-27,362,-9,-361,44,357,-79,-349,114,338,-147,-323,178,306,-208,-285,236,262,-262,-236,285,208,-306,-178,323,147,-338,-114,349,79,-357,-44,361,9,-362,27,359,-62,-353,97,344,-130,-331,163,315,-194,-296,223,274,-250 },   // NOLINT
  { 243,-291,-186,327,122,-351,-53,362,-18,-358,88,341,-155,-311,216,268,-268,-216,311,155,-341,-88,358,18,-362,53,351,-122,-327,186,291,-243,-243,291,186,-327,-122,351,53,-362,18,358,-88,-341,155,311,-216,-268,268,216,-311,-155,341,88,-358,-18,362,-53,-351,122,327,-186,-291,243 },   // NOLINT
  { 236,-306,-147,349,44,-362,62,344,-163,-296,250,223,-315,-130,353,27,-361,79,338,-178,-285,262,208,-323,-114,357,9,-359,97,331,-194,-274,274,194,-331,-97,359,-9,-357,114,323,-208,-262,285,178,-338,-79,361,-27,-353,130,315,-223,-250,296,163,-344,-62,362,-44,-349,147,306,-236 },   // NOLINT
  { 230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230,230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230 },   // NOLINT
  { 223,-331,-62,361,-114,-306,262,178,-349,-9,353,-163,-274,296,130,-359,44,338,-208,-236,323,79,-362,97,315,-250,-194,344,27,-357,147,285,-285,-147,357,-27,-344,194,250,-315,-97,362,-79,-323,236,208,-338,-44,359,-130,-296,274,163,-353,9,349,-178,-262,306,114,-361,62,331,-223 },   // NOLINT
  { 216,-341,-18,351,-186,-243,327,53,-358,155,268,-311,-88,362,-122,-291,291,122,-362,88,311,-268,-155,358,-53,-327,243,186,-351,18,341,-216,-216,341,18,-351,186,243,-327,-53,358,-155,-268,311,88,-362,122,291,-291,-122,362,-88,-311,268,155,-358,53,327,-243,-186,351,-18,-341,216 },   // NOLINT
  { 208,-349,27,331,-250,-163,359,-79,-306,285,114,-362,130,274,-315,-62,357,-178,-236,338,9,-344,223,194,-353,44,323,-262,-147,361,-97,-296,296,97,-361,147,262,-323,-44,353,-194,-223,344,-9,-338,236,178,-357,62,315,-274,-130,362,-114,-285,306,79,-359,163,250,-331,-27,349,-208 },   // NOLINT
  { 201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201 },   // NOLINT
  { 194,-359,114,262,-338,27,315,-296,-62,349,-236,-147,362,-163,-223,353,-79,-285,323,9,-331,274,97,-357,208,178,-361,130,250,-344,44,306,-306,-44,344,-250,-130,361,-178,-208,357,-97,-274,331,-9,-323,285,79,-353,223,163,-362,147,236,-349,62,296,-315,-27,338,-262,-114,359,-194 },   // NOLINT
  { 186,-362,155,216,-358,122,243,-351,88,268,-341,53,291,-327,18,311,-311,-18,327,-291,-53,341,-268,-88,351,-243,-122,358,-216,-155,362,-186,-186,362,-155,-216,358,-122,-243,351,-88,-268,341,-53,-291,327,-18,-311,311,18,-327,291,53,-341,268,88,-351,243,122,-358,216,155,-362,186 },   // NOLINT
  { 178,-362,194,163,-361,208,147,-359,223,130,-357,236,114,-353,250,97,-349,262,79,-344,274,62,-338,285,44,-331,296,27,-323,306,9,-315,315,-9,-306,323,-27,-296,331,-44,-285,338,-62,-274,344,-79,-262,349,-97,-250,353,-114,-236,357,-130,-223,359,-147,-208,361,-163,-194,362,-178 },   // NOLINT
  { 171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171,171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171 },   // NOLINT
  { 163,-357,262,44,-315,331,-79,-236,361,-194,-130,349,-285,-9,296,-344,114,208,-362,223,97,-338,306,-27,-274,353,-147,-178,359,-250,-62,323,-323,62,250,-359,178,147,-353,274,27,-306,338,-97,-223,362,-208,-114,344,-296,9,285,-349,130,194,-361,236,79,-331,315,-44,-262,357,-163 },   // NOLINT
  { 155,-351,291,-18,-268,358,-186,-122,341,-311,53,243,-362,216,88,-327,327,-88,-216,362,-243,-53,311,-341,122,186,-358,268,18,-291,351,-155,-155,351,-291,18,268,-358,186,122,-341,311,-53,-243,362,-216,-88,327,-327,88,216,-362,243,53,-311,341,-122,-186,358,-268,-18,291,-351,155 },   // NOLINT
  { 147,-344,315,-79,-208,359,-274,9,262,-361,223,62,-306,349,-163,-130,338,-323,97,194,-357,285,-27,-250,362,-236,-44,296,-353,178,114,-331,331,-114,-178,353,-296,44,236,-362,250,27,-285,357,-194,-97,323,-338,130,163,-349,306,-62,-223,361,-262,-9,274,-359,208,79,-315,344,-147 },   // NOLINT
  { 139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139 },   // NOLINT
  { 130,-323,349,-194,-62,285,-361,250,-9,-236,359,-296,79,178,-344,331,-147,-114,315,-353,208,44,-274,362,-262,27,223,-357,306,-97,-163,338,-338,163,97,-306,357,-223,-27,262,-362,274,-44,-208,353,-315,114,147,-331,344,-178,-79,296,-359,236,9,-250,361,-285,62,194,-349,323,-130 },   // NOLINT
  { 122,-311,358,-243,18,216,-351,327,-155,-88,291,-362,268,-53,-186,341,-341,186,53,-268,362,-291,88,155,-327,351,-216,-18,243,-358,311,-122,-122,311,-358,243,-18,-216,351,-327,155,88,-291,362,-268,53,186,-341,341,-186,-53,268,-362,291,-88,-155,327,-351,216,18,-243,358,-311,122 },   // NOLINT
  { 114,-296,362,-285,97,130,-306,361,-274,79,147,-315,359,-262,62,163,-323,357,-250,44,178,-331,353,-236,27,194,-338,349,-223,9,208,-344,344,-208,-9,223,-349,338,-194,-27,236,-353,331,-178,-44,250,-357,323,-163,-62,262,-359,315,-147,-79,274,-361,306,-130,-97,285,-362,296,-114 },   // NOLINT
  { 105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105,105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105 },   // NOLINT
  { 97,-262,353,-344,236,-62,-130,285,-359,331,-208,27,163,-306,362,-315,178,9,-194,323,-361,296,-147,-44,223,-338,357,-274,114,79,-250,349,-349,250,-79,-114,274,-357,338,-223,44,147,-296,361,-323,194,-9,-178,315,-362,306,-163,-27,208,-331,359,-285,130,62,-236,344,-353,262,-97 },   // NOLINT
  { 88,-243,341,-358,291,-155,-18,186,-311,362,-327,216,-53,-122,268,-351,351,-268,122,53,-216,327,-362,311,-186,18,155,-291,358,-341,243,-88,-88,243,-341,358,-291,155,18,-186,311,-362,327,-216,53,122,-268,351,-351,268,-122,-53,216,-327,362,-311,186,-18,-155,291,-358,341,-243,88 },   // NOLINT
  { 79,-223,323,-362,331,-236,97,62,-208,315,-361,338,-250,114,44,-194,306,-359,344,-262,130,27,-178,296,-357,349,-274,147,9,-163,285,-353,353,-285,163,-9,-147,274,-349,357,-296,178,-27,-130,262,-344,359,-306,194,-44,-114,250,-338,361,-315,208,-62,-97,236,-331,362,-323,223,-79 },   // NOLINT
  { 71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71 },   // NOLINT
  { 62,-178,274,-338,362,-344,285,-194,79,44,-163,262,-331,361,-349,296,-208,97,27,-147,250,-323,359,-353,306,-223,114,9,-130,236,-315,357,-357,315,-236,130,-9,-114,223,-306,353,-359,323,-250,147,-27,-97,208,-296,349,-361,331,-262,163,-44,-79,194,-285,344,-362,338,-274,178,-62 },   // NOLINT
  { 53,-155,243,-311,351,-362,341,-291,216,-122,18,88,-186,268,-327,358,-358,327,-268,186,-88,-18,122,-216,291,-341,362,-351,311,-243,155,-53,-53,155,-243,311,-351,362,-341,291,-216,122,-18,-88,186,-268,327,-358,358,-327,268,-186,88,18,-122,216,-291,341,-362,351,-311,243,-155,53 },   // NOLINT
  { 44,-130,208,-274,323,-353,362,-349,315,-262,194,-114,27,62,-147,223,-285,331,-357,361,-344,306,-250,178,-97,9,79,-163,236,-296,338,-359,359,-338,296,-236,163,-79,-9,97,-178,250,-306,344,-361,357,-331,285,-223,147,-62,-27,114,-194,262,-315,349,-362,353,-323,274,-208,130,-44 },   // NOLINT
  { 35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35,35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35 },   // NOLINT
  { 27,-79,130,-178,223,-262,296,-323,344,-357,362,-359,349,-331,306,-274,236,-194,147,-97,44,9,-62,114,-163,208,-250,285,-315,338,-353,361,-361,353,-338,315,-285,250,-208,163,-114,62,-9,-44,97,-147,194,-236,274,-306,331,-349,359,-362,357,-344,323,-296,262,-223,178,-130,79,-27 },   // NOLINT
  { 18,-53,88,-122,155,-186,216,-243,268,-291,311,-327,341,-351,358,-362,362,-358,351,-341,327,-311,291,-268,243,-216,186,-155,122,-88,53,-18,-18,53,-88,122,-155,186,-216,243,-268,291,-311,327,-341,351,-358,362,-362,358,-351,341,-327,311,-291,268,-243,216,-186,155,-122,88,-53,18 },   // NOLINT
  { 9,-27,44,-62,79,-97,114,-130,147,-163,178,-194,208,-223,236,-250,262,-274,285,-296,306,-315,323,-331,338,-344,349,-353,357,-359,361,-362,362,-361,359,-357,353,-349,344,-338,331,-323,315,-306,296,-285,274,-262,250,-236,223,-208,194,-178,163,-147,130,-114,97,-79,62,-44,27,-9 },   // NOLINT
};

static const uint16_t
kScanOrder2x2[static_cast<int>(ScanOrder::kTotalNumber)][2 * 2] = {
  { 0, 2, 1, 3 },
  { 0, 1, 2, 3 },
  { 0, 2, 1, 3 }
};

static const uint16_t
kScanOrder4x4[static_cast<int>(ScanOrder::kTotalNumber)][4 * 4] = {
  { 0,  4,  1,  8,  5,  2, 12,  9,  6,  3, 13, 10,  7, 14, 11, 15 },
  { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
  { 0,  4,  8, 12,  1,  5,  9, 13,  2,  6, 10, 14,  3,  7, 11, 15 },
};

static const uint16_t
kScanOrder8x8[static_cast<int>(ScanOrder::kTotalNumber)][8 * 8] = {
  { 0, 8, 1, 16, 9, 2, 24, 17, 10, 3, 25, 18, 11, 26, 19, 27, 32, 40, 33, 48,
  41, 34, 56, 49, 42, 35, 57, 50, 43, 58, 51, 59, 4, 12, 5, 20, 13, 6, 28, 21,
  14, 7, 29, 22, 15, 30, 23, 31, 36, 44, 37, 52, 45, 38, 60, 53, 46, 39, 61,
  54, 47, 62, 55, 63 },
  { 0, 1, 2, 3, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 4, 5, 6, 7, 12,
  13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43,
  48, 49, 50, 51, 56, 57, 58, 59, 36, 37, 38, 39, 44, 45, 46, 47, 52, 53, 54,
  55, 60, 61, 62, 63 },
  { 0, 8, 16, 24, 1, 9, 17, 25, 2, 10, 18, 26, 3, 11, 19, 27, 32, 40, 48, 56,
  33, 41, 49, 57, 34, 42, 50, 58, 35, 43, 51, 59, 4, 12, 20, 28, 5, 13, 21, 29,
  6, 14, 22, 30, 7, 15, 23, 31, 36, 44, 52, 60, 37, 45, 53, 61, 38, 46, 54, 62,
  39, 47, 55, 63 }
};

static const uint16_t kScanOrder16x16Diag[16 * 16] = {
  0, 16, 1, 32, 17, 2, 48, 33, 18, 3, 49, 34, 19, 50, 35, 51,    // NOLINT
  64, 80, 65, 96, 81, 66, 112, 97, 82, 67, 113, 98, 83, 114, 99, 115,    // NOLINT
  4, 20, 5, 36, 21, 6, 52, 37, 22, 7, 53, 38, 23, 54, 39, 55,    // NOLINT
  128, 144, 129, 160, 145, 130, 176, 161, 146, 131, 177, 162, 147, 178, 163, 179,    // NOLINT
  68, 84, 69, 100, 85, 70, 116, 101, 86, 71, 117, 102, 87, 118, 103, 119,    // NOLINT
  8, 24, 9, 40, 25, 10, 56, 41, 26, 11, 57, 42, 27, 58, 43, 59,    // NOLINT
  192, 208, 193, 224, 209, 194, 240, 225, 210, 195, 241, 226, 211, 242, 227, 243,    // NOLINT
  132, 148, 133, 164, 149, 134, 180, 165, 150, 135, 181, 166, 151, 182, 167, 183,    // NOLINT
  72, 88, 73, 104, 89, 74, 120, 105, 90, 75, 121, 106, 91, 122, 107, 123,    // NOLINT
  12, 28, 13, 44, 29, 14, 60, 45, 30, 15, 61, 46, 31, 62, 47, 63,    // NOLINT
  196, 212, 197, 228, 213, 198, 244, 229, 214, 199, 245, 230, 215, 246, 231, 247,    // NOLINT
  136, 152, 137, 168, 153, 138, 184, 169, 154, 139, 185, 170, 155, 186, 171, 187,    // NOLINT
  76, 92, 77, 108, 93, 78, 124, 109, 94, 79, 125, 110, 95, 126, 111, 127,    // NOLINT
  200, 216, 201, 232, 217, 202, 248, 233, 218, 203, 249, 234, 219, 250, 235, 251,    // NOLINT
  140, 156, 141, 172, 157, 142, 188, 173, 158, 143, 189, 174, 159, 190, 175, 191,    // NOLINT
  204, 220, 205, 236, 221, 206, 252, 237, 222, 207, 253, 238, 223, 254, 239, 255,    // NOLINT
};

const uint16_t kScanOrder32x32Diag[32 * 32] = {
  0,32,1,64,33,2,96,65,34,3,97,66,35,98,67,99,128,160,129,192,161,130,224,193,162,131,225,194,163,226,195,227,   // NOLINT
  4,36,5,68,37,6,100,69,38,7,101,70,39,102,71,103,256,288,257,320,289,258,352,321,290,259,353,322,291,354,323,355,   // NOLINT
  132,164,133,196,165,134,228,197,166,135,229,198,167,230,199,231,8,40,9,72,41,10,104,73,42,11,105,74,43,106,75,107,   // NOLINT
  384,416,385,448,417,386,480,449,418,387,481,450,419,482,451,483,260,292,261,324,293,262,356,325,294,263,357,326,295,358,327,359,   // NOLINT
  136,168,137,200,169,138,232,201,170,139,233,202,171,234,203,235,12,44,13,76,45,14,108,77,46,15,109,78,47,110,79,111,   // NOLINT
  512,544,513,576,545,514,608,577,546,515,609,578,547,610,579,611,388,420,389,452,421,390,484,453,422,391,485,454,423,486,455,487,   // NOLINT
  264,296,265,328,297,266,360,329,298,267,361,330,299,362,331,363,140,172,141,204,173,142,236,205,174,143,237,206,175,238,207,239,   // NOLINT
  16,48,17,80,49,18,112,81,50,19,113,82,51,114,83,115,640,672,641,704,673,642,736,705,674,643,737,706,675,738,707,739,   // NOLINT
  516,548,517,580,549,518,612,581,550,519,613,582,551,614,583,615,392,424,393,456,425,394,488,457,426,395,489,458,427,490,459,491,   // NOLINT
  268,300,269,332,301,270,364,333,302,271,365,334,303,366,335,367,144,176,145,208,177,146,240,209,178,147,241,210,179,242,211,243,   // NOLINT
  20,52,21,84,53,22,116,85,54,23,117,86,55,118,87,119,768,800,769,832,801,770,864,833,802,771,865,834,803,866,835,867,   // NOLINT
  644,676,645,708,677,646,740,709,678,647,741,710,679,742,711,743,520,552,521,584,553,522,616,585,554,523,617,586,555,618,587,619,   // NOLINT
  396,428,397,460,429,398,492,461,430,399,493,462,431,494,463,495,272,304,273,336,305,274,368,337,306,275,369,338,307,370,339,371,   // NOLINT
  148,180,149,212,181,150,244,213,182,151,245,214,183,246,215,247,24,56,25,88,57,26,120,89,58,27,121,90,59,122,91,123,   // NOLINT
  896,928,897,960,929,898,992,961,930,899,993,962,931,994,963,995,772,804,773,836,805,774,868,837,806,775,869,838,807,870,839,871,   // NOLINT
  648,680,649,712,681,650,744,713,682,651,745,714,683,746,715,747,524,556,525,588,557,526,620,589,558,527,621,590,559,622,591,623,   // NOLINT
  400,432,401,464,433,402,496,465,434,403,497,466,435,498,467,499,276,308,277,340,309,278,372,341,310,279,373,342,311,374,343,375,   // NOLINT
  152,184,153,216,185,154,248,217,186,155,249,218,187,250,219,251,28,60,29,92,61,30,124,93,62,31,125,94,63,126,95,127,   // NOLINT
  900,932,901,964,933,902,996,965,934,903,997,966,935,998,967,999,776,808,777,840,809,778,872,841,810,779,873,842,811,874,843,875,   // NOLINT
  652,684,653,716,685,654,748,717,686,655,749,718,687,750,719,751,528,560,529,592,561,530,624,593,562,531,625,594,563,626,595,627,   // NOLINT
  404,436,405,468,437,406,500,469,438,407,501,470,439,502,471,503,280,312,281,344,313,282,376,345,314,283,377,346,315,378,347,379,   // NOLINT
  156,188,157,220,189,158,252,221,190,159,253,222,191,254,223,255,904,936,905,968,937,906,1000,969,938,907,1001,970,939,1002,971,1003,   // NOLINT
  780,812,781,844,813,782,876,845,814,783,877,846,815,878,847,879,656,688,657,720,689,658,752,721,690,659,753,722,691,754,723,755,   // NOLINT
  532,564,533,596,565,534,628,597,566,535,629,598,567,630,599,631,408,440,409,472,441,410,504,473,442,411,505,474,443,506,475,507,   // NOLINT
  284,316,285,348,317,286,380,349,318,287,381,350,319,382,351,383,908,940,909,972,941,910,1004,973,942,911,1005,974,943,1006,975,1007,   // NOLINT
  784,816,785,848,817,786,880,849,818,787,881,850,819,882,851,883,660,692,661,724,693,662,756,725,694,663,757,726,695,758,727,759,   // NOLINT
  536,568,537,600,569,538,632,601,570,539,633,602,571,634,603,635,412,444,413,476,445,414,508,477,446,415,509,478,447,510,479,511,   // NOLINT
  912,944,913,976,945,914,1008,977,946,915,1009,978,947,1010,979,1011,788,820,789,852,821,790,884,853,822,791,885,854,823,886,855,887,   // NOLINT
  664,696,665,728,697,666,760,729,698,667,761,730,699,762,731,763,540,572,541,604,573,542,636,605,574,543,637,606,575,638,607,639,   // NOLINT
  916,948,917,980,949,918,1012,981,950,919,1013,982,951,1014,983,1015,792,824,793,856,825,794,888,857,826,795,889,858,827,890,859,891,   // NOLINT
  668,700,669,732,701,670,764,733,702,671,765,734,703,766,735,767,920,952,921,984,953,922,1016,985,954,923,1017,986,955,1018,987,1019,   // NOLINT
  796,828,797,860,829,798,892,861,830,799,893,862,831,894,863,895,924,956,925,988,957,926,1020,989,958,927,1021,990,959,1022,991,1023,   // NOLINT
};

const uint16_t kScanOrder64x64Diag[64 * 64] = {
  0,64,1,128,65,2,192,129,66,3,193,130,67,194,131,195,256,320,257,384,321,258,448,385,322,259,449,386,323,450,387,451,4,68,5,132,69,6,196,133,70,7,197,134,71,198,135,199,512,576,513,640,577,514,704,641,578,515,705,642,579,706,643,707,   // NOLINT
  260,324,261,388,325,262,452,389,326,263,453,390,327,454,391,455,8,72,9,136,73,10,200,137,74,11,201,138,75,202,139,203,768,832,769,896,833,770,960,897,834,771,961,898,835,962,899,963,516,580,517,644,581,518,708,645,582,519,709,646,583,710,647,711,   // NOLINT
  264,328,265,392,329,266,456,393,330,267,457,394,331,458,395,459,12,76,13,140,77,14,204,141,78,15,205,142,79,206,143,207,1024,1088,1025,1152,1089,1026,1216,1153,1090,1027,1217,1154,1091,1218,1155,1219,772,836,773,900,837,774,964,901,838,775,965,902,839,966,903,967,   // NOLINT
  520,584,521,648,585,522,712,649,586,523,713,650,587,714,651,715,268,332,269,396,333,270,460,397,334,271,461,398,335,462,399,463,16,80,17,144,81,18,208,145,82,19,209,146,83,210,147,211,1280,1344,1281,1408,1345,1282,1472,1409,1346,1283,1473,1410,1347,1474,1411,1475,   // NOLINT
  1028,1092,1029,1156,1093,1030,1220,1157,1094,1031,1221,1158,1095,1222,1159,1223,776,840,777,904,841,778,968,905,842,779,969,906,843,970,907,971,524,588,525,652,589,526,716,653,590,527,717,654,591,718,655,719,272,336,273,400,337,274,464,401,338,275,465,402,339,466,403,467,   // NOLINT
  20,84,21,148,85,22,212,149,86,23,213,150,87,214,151,215,1536,1600,1537,1664,1601,1538,1728,1665,1602,1539,1729,1666,1603,1730,1667,1731,1284,1348,1285,1412,1349,1286,1476,1413,1350,1287,1477,1414,1351,1478,1415,1479,1032,1096,1033,1160,1097,1034,1224,1161,1098,1035,1225,1162,1099,1226,1163,1227,   // NOLINT
  780,844,781,908,845,782,972,909,846,783,973,910,847,974,911,975,528,592,529,656,593,530,720,657,594,531,721,658,595,722,659,723,276,340,277,404,341,278,468,405,342,279,469,406,343,470,407,471,24,88,25,152,89,26,216,153,90,27,217,154,91,218,155,219,   // NOLINT
  1792,1856,1793,1920,1857,1794,1984,1921,1858,1795,1985,1922,1859,1986,1923,1987,1540,1604,1541,1668,1605,1542,1732,1669,1606,1543,1733,1670,1607,1734,1671,1735,1288,1352,1289,1416,1353,1290,1480,1417,1354,1291,1481,1418,1355,1482,1419,1483,1036,1100,1037,1164,1101,1038,1228,1165,1102,1039,1229,1166,1103,1230,1167,1231,   // NOLINT
  784,848,785,912,849,786,976,913,850,787,977,914,851,978,915,979,532,596,533,660,597,534,724,661,598,535,725,662,599,726,663,727,280,344,281,408,345,282,472,409,346,283,473,410,347,474,411,475,28,92,29,156,93,30,220,157,94,31,221,158,95,222,159,223,   // NOLINT
  2048,2112,2049,2176,2113,2050,2240,2177,2114,2051,2241,2178,2115,2242,2179,2243,1796,1860,1797,1924,1861,1798,1988,1925,1862,1799,1989,1926,1863,1990,1927,1991,1544,1608,1545,1672,1609,1546,1736,1673,1610,1547,1737,1674,1611,1738,1675,1739,1292,1356,1293,1420,1357,1294,1484,1421,1358,1295,1485,1422,1359,1486,1423,1487,   // NOLINT
  1040,1104,1041,1168,1105,1042,1232,1169,1106,1043,1233,1170,1107,1234,1171,1235,788,852,789,916,853,790,980,917,854,791,981,918,855,982,919,983,536,600,537,664,601,538,728,665,602,539,729,666,603,730,667,731,284,348,285,412,349,286,476,413,350,287,477,414,351,478,415,479,   // NOLINT
  32,96,33,160,97,34,224,161,98,35,225,162,99,226,163,227,2304,2368,2305,2432,2369,2306,2496,2433,2370,2307,2497,2434,2371,2498,2435,2499,2052,2116,2053,2180,2117,2054,2244,2181,2118,2055,2245,2182,2119,2246,2183,2247,1800,1864,1801,1928,1865,1802,1992,1929,1866,1803,1993,1930,1867,1994,1931,1995,   // NOLINT
  1548,1612,1549,1676,1613,1550,1740,1677,1614,1551,1741,1678,1615,1742,1679,1743,1296,1360,1297,1424,1361,1298,1488,1425,1362,1299,1489,1426,1363,1490,1427,1491,1044,1108,1045,1172,1109,1046,1236,1173,1110,1047,1237,1174,1111,1238,1175,1239,792,856,793,920,857,794,984,921,858,795,985,922,859,986,923,987,   // NOLINT
  540,604,541,668,605,542,732,669,606,543,733,670,607,734,671,735,288,352,289,416,353,290,480,417,354,291,481,418,355,482,419,483,36,100,37,164,101,38,228,165,102,39,229,166,103,230,167,231,2560,2624,2561,2688,2625,2562,2752,2689,2626,2563,2753,2690,2627,2754,2691,2755,   // NOLINT
  2308,2372,2309,2436,2373,2310,2500,2437,2374,2311,2501,2438,2375,2502,2439,2503,2056,2120,2057,2184,2121,2058,2248,2185,2122,2059,2249,2186,2123,2250,2187,2251,1804,1868,1805,1932,1869,1806,1996,1933,1870,1807,1997,1934,1871,1998,1935,1999,1552,1616,1553,1680,1617,1554,1744,1681,1618,1555,1745,1682,1619,1746,1683,1747,   // NOLINT
  1300,1364,1301,1428,1365,1302,1492,1429,1366,1303,1493,1430,1367,1494,1431,1495,1048,1112,1049,1176,1113,1050,1240,1177,1114,1051,1241,1178,1115,1242,1179,1243,796,860,797,924,861,798,988,925,862,799,989,926,863,990,927,991,544,608,545,672,609,546,736,673,610,547,737,674,611,738,675,739,   // NOLINT
  292,356,293,420,357,294,484,421,358,295,485,422,359,486,423,487,40,104,41,168,105,42,232,169,106,43,233,170,107,234,171,235,2816,2880,2817,2944,2881,2818,3008,2945,2882,2819,3009,2946,2883,3010,2947,3011,2564,2628,2565,2692,2629,2566,2756,2693,2630,2567,2757,2694,2631,2758,2695,2759,   // NOLINT
  2312,2376,2313,2440,2377,2314,2504,2441,2378,2315,2505,2442,2379,2506,2443,2507,2060,2124,2061,2188,2125,2062,2252,2189,2126,2063,2253,2190,2127,2254,2191,2255,1808,1872,1809,1936,1873,1810,2000,1937,1874,1811,2001,1938,1875,2002,1939,2003,1556,1620,1557,1684,1621,1558,1748,1685,1622,1559,1749,1686,1623,1750,1687,1751,   // NOLINT
  1304,1368,1305,1432,1369,1306,1496,1433,1370,1307,1497,1434,1371,1498,1435,1499,1052,1116,1053,1180,1117,1054,1244,1181,1118,1055,1245,1182,1119,1246,1183,1247,800,864,801,928,865,802,992,929,866,803,993,930,867,994,931,995,548,612,549,676,613,550,740,677,614,551,741,678,615,742,679,743,   // NOLINT
  296,360,297,424,361,298,488,425,362,299,489,426,363,490,427,491,44,108,45,172,109,46,236,173,110,47,237,174,111,238,175,239,3072,3136,3073,3200,3137,3074,3264,3201,3138,3075,3265,3202,3139,3266,3203,3267,2820,2884,2821,2948,2885,2822,3012,2949,2886,2823,3013,2950,2887,3014,2951,3015,   // NOLINT
  2568,2632,2569,2696,2633,2570,2760,2697,2634,2571,2761,2698,2635,2762,2699,2763,2316,2380,2317,2444,2381,2318,2508,2445,2382,2319,2509,2446,2383,2510,2447,2511,2064,2128,2065,2192,2129,2066,2256,2193,2130,2067,2257,2194,2131,2258,2195,2259,1812,1876,1813,1940,1877,1814,2004,1941,1878,1815,2005,1942,1879,2006,1943,2007,   // NOLINT
  1560,1624,1561,1688,1625,1562,1752,1689,1626,1563,1753,1690,1627,1754,1691,1755,1308,1372,1309,1436,1373,1310,1500,1437,1374,1311,1501,1438,1375,1502,1439,1503,1056,1120,1057,1184,1121,1058,1248,1185,1122,1059,1249,1186,1123,1250,1187,1251,804,868,805,932,869,806,996,933,870,807,997,934,871,998,935,999,   // NOLINT
  552,616,553,680,617,554,744,681,618,555,745,682,619,746,683,747,300,364,301,428,365,302,492,429,366,303,493,430,367,494,431,495,48,112,49,176,113,50,240,177,114,51,241,178,115,242,179,243,3328,3392,3329,3456,3393,3330,3520,3457,3394,3331,3521,3458,3395,3522,3459,3523,   // NOLINT
  3076,3140,3077,3204,3141,3078,3268,3205,3142,3079,3269,3206,3143,3270,3207,3271,2824,2888,2825,2952,2889,2826,3016,2953,2890,2827,3017,2954,2891,3018,2955,3019,2572,2636,2573,2700,2637,2574,2764,2701,2638,2575,2765,2702,2639,2766,2703,2767,2320,2384,2321,2448,2385,2322,2512,2449,2386,2323,2513,2450,2387,2514,2451,2515,   // NOLINT
  2068,2132,2069,2196,2133,2070,2260,2197,2134,2071,2261,2198,2135,2262,2199,2263,1816,1880,1817,1944,1881,1818,2008,1945,1882,1819,2009,1946,1883,2010,1947,2011,1564,1628,1565,1692,1629,1566,1756,1693,1630,1567,1757,1694,1631,1758,1695,1759,1312,1376,1313,1440,1377,1314,1504,1441,1378,1315,1505,1442,1379,1506,1443,1507,   // NOLINT
  1060,1124,1061,1188,1125,1062,1252,1189,1126,1063,1253,1190,1127,1254,1191,1255,808,872,809,936,873,810,1000,937,874,811,1001,938,875,1002,939,1003,556,620,557,684,621,558,748,685,622,559,749,686,623,750,687,751,304,368,305,432,369,306,496,433,370,307,497,434,371,498,435,499,   // NOLINT
  52,116,53,180,117,54,244,181,118,55,245,182,119,246,183,247,3584,3648,3585,3712,3649,3586,3776,3713,3650,3587,3777,3714,3651,3778,3715,3779,3332,3396,3333,3460,3397,3334,3524,3461,3398,3335,3525,3462,3399,3526,3463,3527,3080,3144,3081,3208,3145,3082,3272,3209,3146,3083,3273,3210,3147,3274,3211,3275,   // NOLINT
  2828,2892,2829,2956,2893,2830,3020,2957,2894,2831,3021,2958,2895,3022,2959,3023,2576,2640,2577,2704,2641,2578,2768,2705,2642,2579,2769,2706,2643,2770,2707,2771,2324,2388,2325,2452,2389,2326,2516,2453,2390,2327,2517,2454,2391,2518,2455,2519,2072,2136,2073,2200,2137,2074,2264,2201,2138,2075,2265,2202,2139,2266,2203,2267,   // NOLINT
  1820,1884,1821,1948,1885,1822,2012,1949,1886,1823,2013,1950,1887,2014,1951,2015,1568,1632,1569,1696,1633,1570,1760,1697,1634,1571,1761,1698,1635,1762,1699,1763,1316,1380,1317,1444,1381,1318,1508,1445,1382,1319,1509,1446,1383,1510,1447,1511,1064,1128,1065,1192,1129,1066,1256,1193,1130,1067,1257,1194,1131,1258,1195,1259,   // NOLINT
  812,876,813,940,877,814,1004,941,878,815,1005,942,879,1006,943,1007,560,624,561,688,625,562,752,689,626,563,753,690,627,754,691,755,308,372,309,436,373,310,500,437,374,311,501,438,375,502,439,503,56,120,57,184,121,58,248,185,122,59,249,186,123,250,187,251,   // NOLINT
  3840,3904,3841,3968,3905,3842,4032,3969,3906,3843,4033,3970,3907,4034,3971,4035,3588,3652,3589,3716,3653,3590,3780,3717,3654,3591,3781,3718,3655,3782,3719,3783,3336,3400,3337,3464,3401,3338,3528,3465,3402,3339,3529,3466,3403,3530,3467,3531,3084,3148,3085,3212,3149,3086,3276,3213,3150,3087,3277,3214,3151,3278,3215,3279,   // NOLINT
  2832,2896,2833,2960,2897,2834,3024,2961,2898,2835,3025,2962,2899,3026,2963,3027,2580,2644,2581,2708,2645,2582,2772,2709,2646,2583,2773,2710,2647,2774,2711,2775,2328,2392,2329,2456,2393,2330,2520,2457,2394,2331,2521,2458,2395,2522,2459,2523,2076,2140,2077,2204,2141,2078,2268,2205,2142,2079,2269,2206,2143,2270,2207,2271,   // NOLINT
  1824,1888,1825,1952,1889,1826,2016,1953,1890,1827,2017,1954,1891,2018,1955,2019,1572,1636,1573,1700,1637,1574,1764,1701,1638,1575,1765,1702,1639,1766,1703,1767,1320,1384,1321,1448,1385,1322,1512,1449,1386,1323,1513,1450,1387,1514,1451,1515,1068,1132,1069,1196,1133,1070,1260,1197,1134,1071,1261,1198,1135,1262,1199,1263,   // NOLINT
  816,880,817,944,881,818,1008,945,882,819,1009,946,883,1010,947,1011,564,628,565,692,629,566,756,693,630,567,757,694,631,758,695,759,312,376,313,440,377,314,504,441,378,315,505,442,379,506,443,507,60,124,61,188,125,62,252,189,126,63,253,190,127,254,191,255,   // NOLINT
  3844,3908,3845,3972,3909,3846,4036,3973,3910,3847,4037,3974,3911,4038,3975,4039,3592,3656,3593,3720,3657,3594,3784,3721,3658,3595,3785,3722,3659,3786,3723,3787,3340,3404,3341,3468,3405,3342,3532,3469,3406,3343,3533,3470,3407,3534,3471,3535,3088,3152,3089,3216,3153,3090,3280,3217,3154,3091,3281,3218,3155,3282,3219,3283,   // NOLINT
  2836,2900,2837,2964,2901,2838,3028,2965,2902,2839,3029,2966,2903,3030,2967,3031,2584,2648,2585,2712,2649,2586,2776,2713,2650,2587,2777,2714,2651,2778,2715,2779,2332,2396,2333,2460,2397,2334,2524,2461,2398,2335,2525,2462,2399,2526,2463,2527,2080,2144,2081,2208,2145,2082,2272,2209,2146,2083,2273,2210,2147,2274,2211,2275,   // NOLINT
  1828,1892,1829,1956,1893,1830,2020,1957,1894,1831,2021,1958,1895,2022,1959,2023,1576,1640,1577,1704,1641,1578,1768,1705,1642,1579,1769,1706,1643,1770,1707,1771,1324,1388,1325,1452,1389,1326,1516,1453,1390,1327,1517,1454,1391,1518,1455,1519,1072,1136,1073,1200,1137,1074,1264,1201,1138,1075,1265,1202,1139,1266,1203,1267,   // NOLINT
  820,884,821,948,885,822,1012,949,886,823,1013,950,887,1014,951,1015,568,632,569,696,633,570,760,697,634,571,761,698,635,762,699,763,316,380,317,444,381,318,508,445,382,319,509,446,383,510,447,511,3848,3912,3849,3976,3913,3850,4040,3977,3914,3851,4041,3978,3915,4042,3979,4043,   // NOLINT
  3596,3660,3597,3724,3661,3598,3788,3725,3662,3599,3789,3726,3663,3790,3727,3791,3344,3408,3345,3472,3409,3346,3536,3473,3410,3347,3537,3474,3411,3538,3475,3539,3092,3156,3093,3220,3157,3094,3284,3221,3158,3095,3285,3222,3159,3286,3223,3287,2840,2904,2841,2968,2905,2842,3032,2969,2906,2843,3033,2970,2907,3034,2971,3035,   // NOLINT
  2588,2652,2589,2716,2653,2590,2780,2717,2654,2591,2781,2718,2655,2782,2719,2783,2336,2400,2337,2464,2401,2338,2528,2465,2402,2339,2529,2466,2403,2530,2467,2531,2084,2148,2085,2212,2149,2086,2276,2213,2150,2087,2277,2214,2151,2278,2215,2279,1832,1896,1833,1960,1897,1834,2024,1961,1898,1835,2025,1962,1899,2026,1963,2027,   // NOLINT
  1580,1644,1581,1708,1645,1582,1772,1709,1646,1583,1773,1710,1647,1774,1711,1775,1328,1392,1329,1456,1393,1330,1520,1457,1394,1331,1521,1458,1395,1522,1459,1523,1076,1140,1077,1204,1141,1078,1268,1205,1142,1079,1269,1206,1143,1270,1207,1271,824,888,825,952,889,826,1016,953,890,827,1017,954,891,1018,955,1019,   // NOLINT
  572,636,573,700,637,574,764,701,638,575,765,702,639,766,703,767,3852,3916,3853,3980,3917,3854,4044,3981,3918,3855,4045,3982,3919,4046,3983,4047,3600,3664,3601,3728,3665,3602,3792,3729,3666,3603,3793,3730,3667,3794,3731,3795,3348,3412,3349,3476,3413,3350,3540,3477,3414,3351,3541,3478,3415,3542,3479,3543,   // NOLINT
  3096,3160,3097,3224,3161,3098,3288,3225,3162,3099,3289,3226,3163,3290,3227,3291,2844,2908,2845,2972,2909,2846,3036,2973,2910,2847,3037,2974,2911,3038,2975,3039,2592,2656,2593,2720,2657,2594,2784,2721,2658,2595,2785,2722,2659,2786,2723,2787,2340,2404,2341,2468,2405,2342,2532,2469,2406,2343,2533,2470,2407,2534,2471,2535,   // NOLINT
  2088,2152,2089,2216,2153,2090,2280,2217,2154,2091,2281,2218,2155,2282,2219,2283,1836,1900,1837,1964,1901,1838,2028,1965,1902,1839,2029,1966,1903,2030,1967,2031,1584,1648,1585,1712,1649,1586,1776,1713,1650,1587,1777,1714,1651,1778,1715,1779,1332,1396,1333,1460,1397,1334,1524,1461,1398,1335,1525,1462,1399,1526,1463,1527,   // NOLINT
  1080,1144,1081,1208,1145,1082,1272,1209,1146,1083,1273,1210,1147,1274,1211,1275,828,892,829,956,893,830,1020,957,894,831,1021,958,895,1022,959,1023,3856,3920,3857,3984,3921,3858,4048,3985,3922,3859,4049,3986,3923,4050,3987,4051,3604,3668,3605,3732,3669,3606,3796,3733,3670,3607,3797,3734,3671,3798,3735,3799,   // NOLINT
  3352,3416,3353,3480,3417,3354,3544,3481,3418,3355,3545,3482,3419,3546,3483,3547,3100,3164,3101,3228,3165,3102,3292,3229,3166,3103,3293,3230,3167,3294,3231,3295,2848,2912,2849,2976,2913,2850,3040,2977,2914,2851,3041,2978,2915,3042,2979,3043,2596,2660,2597,2724,2661,2598,2788,2725,2662,2599,2789,2726,2663,2790,2727,2791,   // NOLINT
  2344,2408,2345,2472,2409,2346,2536,2473,2410,2347,2537,2474,2411,2538,2475,2539,2092,2156,2093,2220,2157,2094,2284,2221,2158,2095,2285,2222,2159,2286,2223,2287,1840,1904,1841,1968,1905,1842,2032,1969,1906,1843,2033,1970,1907,2034,1971,2035,1588,1652,1589,1716,1653,1590,1780,1717,1654,1591,1781,1718,1655,1782,1719,1783,   // NOLINT
  1336,1400,1337,1464,1401,1338,1528,1465,1402,1339,1529,1466,1403,1530,1467,1531,1084,1148,1085,1212,1149,1086,1276,1213,1150,1087,1277,1214,1151,1278,1215,1279,3860,3924,3861,3988,3925,3862,4052,3989,3926,3863,4053,3990,3927,4054,3991,4055,3608,3672,3609,3736,3673,3610,3800,3737,3674,3611,3801,3738,3675,3802,3739,3803,   // NOLINT
  3356,3420,3357,3484,3421,3358,3548,3485,3422,3359,3549,3486,3423,3550,3487,3551,3104,3168,3105,3232,3169,3106,3296,3233,3170,3107,3297,3234,3171,3298,3235,3299,2852,2916,2853,2980,2917,2854,3044,2981,2918,2855,3045,2982,2919,3046,2983,3047,2600,2664,2601,2728,2665,2602,2792,2729,2666,2603,2793,2730,2667,2794,2731,2795,   // NOLINT
  2348,2412,2349,2476,2413,2350,2540,2477,2414,2351,2541,2478,2415,2542,2479,2543,2096,2160,2097,2224,2161,2098,2288,2225,2162,2099,2289,2226,2163,2290,2227,2291,1844,1908,1845,1972,1909,1846,2036,1973,1910,1847,2037,1974,1911,2038,1975,2039,1592,1656,1593,1720,1657,1594,1784,1721,1658,1595,1785,1722,1659,1786,1723,1787,   // NOLINT
  1340,1404,1341,1468,1405,1342,1532,1469,1406,1343,1533,1470,1407,1534,1471,1535,3864,3928,3865,3992,3929,3866,4056,3993,3930,3867,4057,3994,3931,4058,3995,4059,3612,3676,3613,3740,3677,3614,3804,3741,3678,3615,3805,3742,3679,3806,3743,3807,3360,3424,3361,3488,3425,3362,3552,3489,3426,3363,3553,3490,3427,3554,3491,3555,   // NOLINT
  3108,3172,3109,3236,3173,3110,3300,3237,3174,3111,3301,3238,3175,3302,3239,3303,2856,2920,2857,2984,2921,2858,3048,2985,2922,2859,3049,2986,2923,3050,2987,3051,2604,2668,2605,2732,2669,2606,2796,2733,2670,2607,2797,2734,2671,2798,2735,2799,2352,2416,2353,2480,2417,2354,2544,2481,2418,2355,2545,2482,2419,2546,2483,2547,   // NOLINT
  2100,2164,2101,2228,2165,2102,2292,2229,2166,2103,2293,2230,2167,2294,2231,2295,1848,1912,1849,1976,1913,1850,2040,1977,1914,1851,2041,1978,1915,2042,1979,2043,1596,1660,1597,1724,1661,1598,1788,1725,1662,1599,1789,1726,1663,1790,1727,1791,3868,3932,3869,3996,3933,3870,4060,3997,3934,3871,4061,3998,3935,4062,3999,4063,   // NOLINT
  3616,3680,3617,3744,3681,3618,3808,3745,3682,3619,3809,3746,3683,3810,3747,3811,3364,3428,3365,3492,3429,3366,3556,3493,3430,3367,3557,3494,3431,3558,3495,3559,3112,3176,3113,3240,3177,3114,3304,3241,3178,3115,3305,3242,3179,3306,3243,3307,2860,2924,2861,2988,2925,2862,3052,2989,2926,2863,3053,2990,2927,3054,2991,3055,   // NOLINT
  2608,2672,2609,2736,2673,2610,2800,2737,2674,2611,2801,2738,2675,2802,2739,2803,2356,2420,2357,2484,2421,2358,2548,2485,2422,2359,2549,2486,2423,2550,2487,2551,2104,2168,2105,2232,2169,2106,2296,2233,2170,2107,2297,2234,2171,2298,2235,2299,1852,1916,1853,1980,1917,1854,2044,1981,1918,1855,2045,1982,1919,2046,1983,2047,   // NOLINT
  3872,3936,3873,4000,3937,3874,4064,4001,3938,3875,4065,4002,3939,4066,4003,4067,3620,3684,3621,3748,3685,3622,3812,3749,3686,3623,3813,3750,3687,3814,3751,3815,3368,3432,3369,3496,3433,3370,3560,3497,3434,3371,3561,3498,3435,3562,3499,3563,3116,3180,3117,3244,3181,3118,3308,3245,3182,3119,3309,3246,3183,3310,3247,3311,   // NOLINT
  2864,2928,2865,2992,2929,2866,3056,2993,2930,2867,3057,2994,2931,3058,2995,3059,2612,2676,2613,2740,2677,2614,2804,2741,2678,2615,2805,2742,2679,2806,2743,2807,2360,2424,2361,2488,2425,2362,2552,2489,2426,2363,2553,2490,2427,2554,2491,2555,2108,2172,2109,2236,2173,2110,2300,2237,2174,2111,2301,2238,2175,2302,2239,2303,   // NOLINT
  3876,3940,3877,4004,3941,3878,4068,4005,3942,3879,4069,4006,3943,4070,4007,4071,3624,3688,3625,3752,3689,3626,3816,3753,3690,3627,3817,3754,3691,3818,3755,3819,3372,3436,3373,3500,3437,3374,3564,3501,3438,3375,3565,3502,3439,3566,3503,3567,3120,3184,3121,3248,3185,3122,3312,3249,3186,3123,3313,3250,3187,3314,3251,3315,   // NOLINT
  2868,2932,2869,2996,2933,2870,3060,2997,2934,2871,3061,2998,2935,3062,2999,3063,2616,2680,2617,2744,2681,2618,2808,2745,2682,2619,2809,2746,2683,2810,2747,2811,2364,2428,2365,2492,2429,2366,2556,2493,2430,2367,2557,2494,2431,2558,2495,2559,3880,3944,3881,4008,3945,3882,4072,4009,3946,3883,4073,4010,3947,4074,4011,4075,   // NOLINT
  3628,3692,3629,3756,3693,3630,3820,3757,3694,3631,3821,3758,3695,3822,3759,3823,3376,3440,3377,3504,3441,3378,3568,3505,3442,3379,3569,3506,3443,3570,3507,3571,3124,3188,3125,3252,3189,3126,3316,3253,3190,3127,3317,3254,3191,3318,3255,3319,2872,2936,2873,3000,2937,2874,3064,3001,2938,2875,3065,3002,2939,3066,3003,3067,   // NOLINT
  2620,2684,2621,2748,2685,2622,2812,2749,2686,2623,2813,2750,2687,2814,2751,2815,3884,3948,3885,4012,3949,3886,4076,4013,3950,3887,4077,4014,3951,4078,4015,4079,3632,3696,3633,3760,3697,3634,3824,3761,3698,3635,3825,3762,3699,3826,3763,3827,3380,3444,3381,3508,3445,3382,3572,3509,3446,3383,3573,3510,3447,3574,3511,3575,   // NOLINT
  3128,3192,3129,3256,3193,3130,3320,3257,3194,3131,3321,3258,3195,3322,3259,3323,2876,2940,2877,3004,2941,2878,3068,3005,2942,2879,3069,3006,2943,3070,3007,3071,3888,3952,3889,4016,3953,3890,4080,4017,3954,3891,4081,4018,3955,4082,4019,4083,3636,3700,3637,3764,3701,3638,3828,3765,3702,3639,3829,3766,3703,3830,3767,3831,   // NOLINT
  3384,3448,3385,3512,3449,3386,3576,3513,3450,3387,3577,3514,3451,3578,3515,3579,3132,3196,3133,3260,3197,3134,3324,3261,3198,3135,3325,3262,3199,3326,3263,3327,3892,3956,3893,4020,3957,3894,4084,4021,3958,3895,4085,4022,3959,4086,4023,4087,3640,3704,3641,3768,3705,3642,3832,3769,3706,3643,3833,3770,3707,3834,3771,3835,   // NOLINT
  3388,3452,3389,3516,3453,3390,3580,3517,3454,3391,3581,3518,3455,3582,3519,3583,3896,3960,3897,4024,3961,3898,4088,4025,3962,3899,4089,4026,3963,4090,4027,4091,3644,3708,3645,3772,3709,3646,3836,3773,3710,3647,3837,3774,3711,3838,3775,3839,3900,3964,3901,4028,3965,3902,4092,4029,3966,3903,4093,4030,3967,4094,4031,4095,   // NOLINT
};

static const uint16_t
kScanOrder8x8SubBlock[8 * 8] = {
  0, 8, 1, 16, 9, 2, 24, 17,
  10, 3, 32, 25, 18, 11, 4, 40,
  33, 26, 19, 12, 5, 48, 41, 34,
  27, 20, 13, 6, 56, 49, 42, 35,
  28, 21, 14, 7, 57, 50, 43, 36,
  29, 22, 15, 58, 51, 44, 37, 30,
  23, 59, 52, 45, 38, 31, 60, 53,
  46, 39, 61, 54, 47, 62, 55, 63,
};

static const uint16_t
kScanOrder16x16SubBlock[16 * 16] = {
  0, 16, 1, 32, 17, 2, 48, 33, 18, 3, 64, 49, 34, 19, 4, 80,   // NOLINT
  65, 50, 35, 20, 5, 96, 81, 66, 51, 36, 21, 6, 112, 97, 82, 67,   // NOLINT
  52, 37, 22, 7, 128, 113, 98, 83, 68, 53, 38, 23, 8, 144, 129, 114,   // NOLINT
  99, 84, 69, 54, 39, 24, 9, 160, 145, 130, 115, 100, 85, 70, 55, 40,   // NOLINT
  25, 10, 176, 161, 146, 131, 116, 101, 86, 71, 56, 41, 26, 11, 192, 177,   // NOLINT
  162, 147, 132, 117, 102, 87, 72, 57, 42, 27, 12, 208, 193, 178, 163, 148,   // NOLINT
  133, 118, 103, 88, 73, 58, 43, 28, 13, 224, 209, 194, 179, 164, 149, 134,   // NOLINT
  119, 104, 89, 74, 59, 44, 29, 14, 240, 225, 210, 195, 180, 165, 150, 135,   // NOLINT
  120, 105, 90, 75, 60, 45, 30, 15, 241, 226, 211, 196, 181, 166, 151, 136,   // NOLINT
  121, 106, 91, 76, 61, 46, 31, 242, 227, 212, 197, 182, 167, 152, 137, 122,   // NOLINT
  107, 92, 77, 62, 47, 243, 228, 213, 198, 183, 168, 153, 138, 123, 108, 93,   // NOLINT
  78, 63, 244, 229, 214, 199, 184, 169, 154, 139, 124, 109, 94, 79, 245, 230,   // NOLINT
  215, 200, 185, 170, 155, 140, 125, 110, 95, 246, 231, 216, 201, 186, 171, 156,   // NOLINT
  141, 126, 111, 247, 232, 217, 202, 187, 172, 157, 142, 127, 248, 233, 218, 203,   // NOLINT
  188, 173, 158, 143, 249, 234, 219, 204, 189, 174, 159, 250, 235, 220, 205, 190,   // NOLINT
  175, 251, 236, 221, 206, 191, 252, 237, 222, 207, 253, 238, 223, 254, 239, 255,   // NOLINT
};

const std::array<uint8_t, 128> TransformHelper::kLastPosGroupIdx = { {
  0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13
} };

const std::array<uint8_t, 14> TransformHelper::kLastPosMinInGroup = { {
  0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96
} };

void InverseTransform::Transform(int width, int height, const Coeff *coeff,
                                 ptrdiff_t coeff_stride, Residual *resi,
                                 ptrdiff_t resi_stride, bool dst_transform) {
  const int shift1 = 7 +
    (width >= 64 || width == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (height) {
    case 2:
      InvPartialTransform2(shift1, width, coeff, coeff_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 4:
      if (dst_transform) {
        InvPartialDST4(shift1, coeff, coeff_stride,
                       &coeff_temp_[0], kBufferStride_);
      } else {
        InvPartialTransform4(shift1, width, coeff, coeff_stride,
                             &coeff_temp_[0], kBufferStride_);
      }
      break;
    case 8:
      InvPartialTransform8(shift1, width, coeff, coeff_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 16:
      InvPartialTransform16(shift1, width, coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 32:
      InvPartialTransform32(shift1, width, coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 64:
      InvPartialTransform64(shift1, width,
                            constants::kZeroOutHighFreqLargeTransforms,
                            coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    default:
      assert(0);
      break;
  }
  const int shift2 = 20 - bitdepth_ +
    (height >= 64 || height == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (width) {
    case 2:
      InvPartialTransform2(shift2, height, &coeff_temp_[0], kBufferStride_,
                           resi, resi_stride);
      break;
    case 4:
      if (dst_transform) {
        InvPartialDST4(shift2, &coeff_temp_[0], kBufferStride_, resi,
                       resi_stride);
      } else {
        InvPartialTransform4(shift2, height, &coeff_temp_[0], kBufferStride_,
                             resi, resi_stride);
      }
      break;
    case 8:
      InvPartialTransform8(shift2, height, &coeff_temp_[0], kBufferStride_,
                           resi, resi_stride);
      break;
    case 16:
      InvPartialTransform16(shift2, height, &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    case 32:
      InvPartialTransform32(shift2, height, &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    case 64:
      InvPartialTransform64(shift2, height, false,
                            &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void InverseTransform::InvPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int c[4];

  for (int i = 0; i < 4; i++) {
    c[0] = in[0] + in[2 * in_stride];
    c[1] = in[2 * in_stride] + in[3 * in_stride];
    c[2] = in[0] - in[3 * in_stride];
    c[3] = 74 * in[1 * in_stride];
    out[0] = util::Clip3((29 * c[0] + 55 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((55 * c[2] - 29 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((74 * (in[i] - in[2 * in_stride] +
                                in[3 * in_stride]) + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((55 * c[0] + 29 * c[2] - c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform2(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[1], E[1];

  for (int y = 0; y < lines; y++) {
    O[0] = kInvTransform2[1][0] * in[0 * in_stride] -
      kInvTransform2[1][0] * in[1 * in_stride];
    E[0] = kInvTransform2[0][0] * in[0 * in_stride] +
      kInvTransform2[0][0] * in[1 * in_stride];
    out[0] = util::Clip3((E[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[2], E[2];

  for (int y = 0; y < lines; y++) {
    O[0] = kInvTransform4[1][0] * in[1 * in_stride] +
      kInvTransform4[3][0] * in[3 * in_stride];
    O[1] = kInvTransform4[1][1] * in[1 * in_stride] +
      kInvTransform4[3][1] * in[3 * in_stride];
    E[0] = kInvTransform4[0][0] * in[0 * in_stride] +
      kInvTransform4[2][0] * in[2 * in_stride];
    E[1] = kInvTransform4[0][1] * in[0 * in_stride] +
      kInvTransform4[2][1] * in[2 * in_stride];
    out[0] = util::Clip3((E[0] + O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((E[1] + O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((E[1] - O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((E[0] - O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[4], E[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 4; k++) {
      O[k] = kInvTransform8[1][k] * in[1 * in_stride] +
        kInvTransform8[3][k] * in[3 * in_stride] +
        kInvTransform8[5][k] * in[5 * in_stride] +
        kInvTransform8[7][k] * in[7 * in_stride];
    }
    EO[0] = kInvTransform8[2][0] * in[2 * in_stride] +
      kInvTransform8[6][0] * in[6 * in_stride];
    EO[1] = kInvTransform8[2][1] * in[2 * in_stride] +
      kInvTransform8[6][1] * in[6 * in_stride];
    EE[0] = kInvTransform8[0][0] * in[0 * in_stride] +
      kInvTransform8[4][0] * in[4 * in_stride];
    EE[1] = kInvTransform8[0][1] * in[0 * in_stride] +
      kInvTransform8[4][1] * in[4 * in_stride];
    E[0] = EE[0] + EO[0];
    E[3] = EE[0] - EO[0];
    E[1] = EE[1] + EO[1];
    E[2] = EE[1] - EO[1];
    for (int k = 0; k < 4; ++k) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 4] = util::Clip3((E[3 - k] - O[3 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[8], E[8];
  int EO[4], EE[4];
  int EEO[2], EEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      O[k] = kInvTransform16[1][k] * in[in_stride]
        + kInvTransform16[3][k] * in[3 * in_stride]
        + kInvTransform16[5][k] * in[5 * in_stride]
        + kInvTransform16[7][k] * in[7 * in_stride]
        + kInvTransform16[9][k] * in[9 * in_stride]
        + kInvTransform16[11][k] * in[11 * in_stride]
        + kInvTransform16[13][k] * in[13 * in_stride]
        + kInvTransform16[15][k] * in[15 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EO[k] = kInvTransform16[2][k] * in[2 * in_stride]
        + kInvTransform16[6][k] * in[6 * in_stride]
        + kInvTransform16[10][k] * in[10 * in_stride]
        + kInvTransform16[14][k] * in[14 * in_stride];
    }
    EEO[0] = kInvTransform16[4][0] * in[4 * in_stride]
      + kInvTransform16[12][0] * in[12 * in_stride];
    EEE[0] = kInvTransform16[0][0] * in[0 * in_stride]
      + kInvTransform16[8][0] * in[8 * in_stride];
    EEO[1] = kInvTransform16[4][1] * in[4 * in_stride]
      + kInvTransform16[12][1] * in[12 * in_stride];
    EEE[1] = kInvTransform16[0][1] * in[0 * in_stride]
      + kInvTransform16[8][1] * in[8 * in_stride];
    for (int k = 0; k < 2; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 2] = EEE[1 - k] - EEO[1 - k];
    }
    for (int k = 0; k < 4; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 4] = EE[3 - k] - EO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 8] = util::Clip3((E[7 - k] - O[7 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[16], E[16];
  int EO[8], EE[8];
  int EEO[4], EEE[4];
  int EEEO[2], EEEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      O[k] =
        kInvTransform32[1][k] * in[1 * in_stride] +
        kInvTransform32[3][k] * in[3 * in_stride] +
        kInvTransform32[5][k] * in[5 * in_stride] +
        kInvTransform32[7][k] * in[7 * in_stride] +
        kInvTransform32[9][k] * in[9 * in_stride] +
        kInvTransform32[11][k] * in[11 * in_stride] +
        kInvTransform32[13][k] * in[13 * in_stride] +
        kInvTransform32[15][k] * in[15 * in_stride] +
        kInvTransform32[17][k] * in[17 * in_stride] +
        kInvTransform32[19][k] * in[19 * in_stride] +
        kInvTransform32[21][k] * in[21 * in_stride] +
        kInvTransform32[23][k] * in[23 * in_stride] +
        kInvTransform32[25][k] * in[25 * in_stride] +
        kInvTransform32[27][k] * in[27 * in_stride] +
        kInvTransform32[29][k] * in[29 * in_stride] +
        kInvTransform32[31][k] * in[31 * in_stride];
    }

    for (int k = 0; k < 8; k++) {
      EO[k] =
        kInvTransform32[2][k] * in[2 * in_stride] +
        kInvTransform32[6][k] * in[6 * in_stride] +
        kInvTransform32[10][k] * in[10 * in_stride] +
        kInvTransform32[14][k] * in[14 * in_stride] +
        kInvTransform32[18][k] * in[18 * in_stride] +
        kInvTransform32[22][k] * in[22 * in_stride] +
        kInvTransform32[26][k] * in[26 * in_stride] +
        kInvTransform32[30][k] * in[30 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EEO[k] =
        kInvTransform32[4][k] * in[4 * in_stride] +
        kInvTransform32[12][k] * in[12 * in_stride] +
        kInvTransform32[20][k] * in[20 * in_stride] +
        kInvTransform32[28][k] * in[28 * in_stride];
    }
    EEEO[0] = kInvTransform32[8][0] * in[8 * in_stride] +
      kInvTransform32[24][0] * in[24 * in_stride];
    EEEO[1] = kInvTransform32[8][1] * in[8 * in_stride] +
      kInvTransform32[24][1] * in[24 * in_stride];
    EEEE[0] = kInvTransform32[0][0] * in[0] +
      kInvTransform32[16][0] * in[16 * in_stride];
    EEEE[1] = kInvTransform32[0][1] * in[0] +
      kInvTransform32[16][1] * in[16 * in_stride];
    EEE[0] = EEEE[0] + EEEO[0];
    EEE[3] = EEEE[0] - EEEO[0];
    EEE[1] = EEEE[1] + EEEO[1];
    EEE[2] = EEEE[1] - EEEO[1];
    for (int k = 0; k < 4; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 4] = EEE[3 - k] - EEO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 8] = EE[7 - k] - EO[7 - k];
    }
    for (int k = 0; k < 16; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 16] = util::Clip3((E[15 - k] - O[15 - k] + add) >> shift,
                                constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform64(int shift, int lines,
                                        bool zero_height,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[32], O[32];
  int EO[16], EE[16];
  int EEO[8], EEE[8];
  int EEEO[4], EEEE[4];
  int EEEEO[2], EEEEE[2];
  const int max_lines = zero_height ? 32 : 64;
  const int tx_lines = std::min(max_lines, lines);

  for (int y = 0; y < tx_lines; y++) {
    for (int k = 0; k < 32; k++) {
      O[k] =
        kInvTransform64[1][k] * in[1 * in_stride] +
        kInvTransform64[3][k] * in[3 * in_stride] +
        kInvTransform64[5][k] * in[5 * in_stride] +
        kInvTransform64[7][k] * in[7 * in_stride] +
        kInvTransform64[9][k] * in[9 * in_stride] +
        kInvTransform64[11][k] * in[11 * in_stride] +
        kInvTransform64[13][k] * in[13 * in_stride] +
        kInvTransform64[15][k] * in[15 * in_stride] +
        kInvTransform64[17][k] * in[17 * in_stride] +
        kInvTransform64[19][k] * in[19 * in_stride] +
        kInvTransform64[21][k] * in[21 * in_stride] +
        kInvTransform64[23][k] * in[23 * in_stride] +
        kInvTransform64[25][k] * in[25 * in_stride] +
        kInvTransform64[27][k] * in[27 * in_stride] +
        kInvTransform64[29][k] * in[29 * in_stride] +
        kInvTransform64[31][k] * in[31 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        O[k] +=
          kInvTransform64[33][k] * in[33 * in_stride] +
          kInvTransform64[35][k] * in[35 * in_stride] +
          kInvTransform64[37][k] * in[37 * in_stride] +
          kInvTransform64[39][k] * in[39 * in_stride] +
          kInvTransform64[41][k] * in[41 * in_stride] +
          kInvTransform64[43][k] * in[43 * in_stride] +
          kInvTransform64[45][k] * in[45 * in_stride] +
          kInvTransform64[47][k] * in[47 * in_stride] +
          kInvTransform64[49][k] * in[49 * in_stride] +
          kInvTransform64[51][k] * in[51 * in_stride] +
          kInvTransform64[53][k] * in[53 * in_stride] +
          kInvTransform64[55][k] * in[55 * in_stride] +
          kInvTransform64[57][k] * in[57 * in_stride] +
          kInvTransform64[59][k] * in[59 * in_stride] +
          kInvTransform64[61][k] * in[61 * in_stride] +
          kInvTransform64[63][k] * in[63 * in_stride];
      }
    }
    for (int k = 0; k < 16; k++) {
      EO[k] =
        kInvTransform64[2][k] * in[2 * in_stride] +
        kInvTransform64[6][k] * in[6 * in_stride] +
        kInvTransform64[10][k] * in[10 * in_stride] +
        kInvTransform64[14][k] * in[14 * in_stride] +
        kInvTransform64[18][k] * in[18 * in_stride] +
        kInvTransform64[22][k] * in[22 * in_stride] +
        kInvTransform64[26][k] * in[26 * in_stride] +
        kInvTransform64[30][k] * in[30 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EO[k] += kInvTransform64[34][k] * in[34 * in_stride] +
          kInvTransform64[38][k] * in[38 * in_stride] +
          kInvTransform64[42][k] * in[42 * in_stride] +
          kInvTransform64[46][k] * in[46 * in_stride] +
          kInvTransform64[50][k] * in[50 * in_stride] +
          kInvTransform64[54][k] * in[54 * in_stride] +
          kInvTransform64[58][k] * in[58 * in_stride] +
          kInvTransform64[62][k] * in[62 * in_stride];
      }
    }
    for (int k = 0; k < 8; k++) {
      EEO[k] =
        kInvTransform64[4][k] * in[4 * in_stride] +
        kInvTransform64[12][k] * in[12 * in_stride] +
        kInvTransform64[20][k] * in[20 * in_stride] +
        kInvTransform64[28][k] * in[28 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EEO[k] += kInvTransform64[36][k] * in[36 * in_stride] +
          kInvTransform64[44][k] * in[44 * in_stride] +
          kInvTransform64[52][k] * in[52 * in_stride] +
          kInvTransform64[60][k] * in[60 * in_stride];
      }
    }
    for (int k = 0; k < 4; k++) {
      EEEO[k] =
        kInvTransform64[8][k] * in[8 * in_stride] +
        kInvTransform64[24][k] * in[24 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EEEO[k] += kInvTransform64[40][k] * in[40 * in_stride] +
          kInvTransform64[56][k] * in[56 * in_stride];
      }
    }
    EEEEO[0] = kInvTransform64[16][0] * in[16 * in_stride];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEO[0] += kInvTransform64[48][0] * in[48 * in_stride];
    }
    EEEEO[1] = kInvTransform64[16][1] * in[16 * in_stride];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEO[1] += kInvTransform64[48][1] * in[48 * in_stride];
    }
    EEEEE[0] = kInvTransform64[0][0] * in[0];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEE[0] += kInvTransform64[32][0] * in[32 * in_stride];
    }
    EEEEE[1] = kInvTransform64[0][1] * in[0];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEE[1] += kInvTransform64[32][1] * in[32 * in_stride];
    }
    EEEE[0] = EEEEE[0] + EEEEO[0];
    EEEE[1] = EEEEE[1] + EEEEO[1];
    EEEE[2] = EEEEE[1] - EEEEO[1];
    EEEE[3] = EEEEE[0] - EEEEO[0];
    for (int k = 0; k < 4; k++) {
      EEE[k] = EEEE[k] + EEEO[k];
      EEE[k + 4] = EEEE[3 - k] - EEEO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 8] = EEE[7 - k] - EEO[7 - k];
    }
    for (int k = 0; k < 16; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 16] = EE[15 - k] - EO[15 - k];
    }
    for (int k = 0; k < 32; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 32] = util::Clip3((E[31 - k] - O[31 - k] + add) >> shift,
                                constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
  if (zero_height) {
    for (int y = tx_lines; y < lines; y++) {
      memset(out, 0, sizeof(Coeff) * 64);
      out += out_stride;
    }
  }
}

void ForwardTransform::Transform(int width, int height, const Residual *resi,
                                 ptrdiff_t resi_stride, Coeff *coeff,
                                 ptrdiff_t coeff_stride, bool dst_transform) {
  const int shift1 = util::SizeToLog2(width) + bitdepth_ - 9 +
    (width >= 64 || width == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (width) {
    case 2:
      FwdPartialTransform2(shift1, height, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 4:
      if (dst_transform) {
        FwdPartialDST4(1 + bitdepth_ - 8, resi, resi_stride, &coeff_temp_[0],
                       kBufferStride_);
      } else {
        FwdPartialTransform4(shift1, height, resi, resi_stride,
                             &coeff_temp_[0], kBufferStride_);
      }
      break;
    case 8:
      FwdPartialTransform8(shift1, height, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 16:
      FwdPartialTransform16(shift1, height, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 32:
      FwdPartialTransform32(shift1, height, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 64:
      if (constants::kZeroOutHighFreqLargeTransforms) {
        FwdPartialTransform64<false, true>(shift1, height, resi, resi_stride,
                                           &coeff_temp_[0], kBufferStride_);
      } else {
        FwdPartialTransform64<false, false>(shift1, height, resi, resi_stride,
                                            &coeff_temp_[0], kBufferStride_);
      }
      break;
    default:
      assert(0);
      break;
  }
  const int shift2 = util::SizeToLog2(height) + 6 +
    (height >= 64 || height == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (height) {
    case 2:
      FwdPartialTransform2(shift2, width, &coeff_temp_[0], kBufferStride_,
                           coeff, coeff_stride);
      break;
    case 4:
      if (dst_transform) {
        FwdPartialDST4(shift2, &coeff_temp_[0], kBufferStride_,
                       coeff, coeff_stride);
      } else {
        FwdPartialTransform4(shift2, width, &coeff_temp_[0], kBufferStride_,
                             coeff, coeff_stride);
      }
      break;
    case 8:
      FwdPartialTransform8(shift2, width, &coeff_temp_[0], kBufferStride_,
                           coeff, coeff_stride);
      break;
    case 16:
      FwdPartialTransform16(shift2, width, &coeff_temp_[0], kBufferStride_,
                            coeff, coeff_stride);
      break;
    case 32:
      FwdPartialTransform32(shift2, width, &coeff_temp_[0], kBufferStride_,
                            coeff, coeff_stride);
      break;
    case 64:
      if (constants::kZeroOutHighFreqLargeTransforms) {
        FwdPartialTransform64<true, true>(shift2, width,
                                          &coeff_temp_[0], kBufferStride_,
                                          coeff, coeff_stride);
      } else {
        FwdPartialTransform64<false, false>(shift2, width,
                                            &coeff_temp_[0], kBufferStride_,
                                            coeff, coeff_stride);
      }
      break;
    default:
      assert(0);
      break;
  }
}

void ForwardTransform::FwdPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);

  for (int i = 0; i < 4; i++) {
    int c[4];
    c[0] = in[0] + in[3];
    c[1] = in[1] + in[3];
    c[2] = in[0] - in[1];
    c[3] = 74 * in[2];
    out[0 * out_stride] = (29 * c[0] + 55 * c[1] + c[3] + add) >> shift;
    out[1 * out_stride] = (74 * (in[0] + in[1] - in[3]) + add) >> shift;
    out[2 * out_stride] = (29 * c[2] + 55 * c[0] - c[3] + add) >> shift;
    out[3 * out_stride] = (55 * c[2] - 29 * c[1] + c[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform2(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[1], O[1];

  for (int y = 0; y < lines; y++) {
    E[0] = in[0] + in[1];
    O[0] = in[0] - in[1];
    out[0 * out_stride] = (kFwdTransform2[0][0] * E[0] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform2[1][0] * O[0] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[2], O[2];

  for (int y = 0; y < lines; y++) {
    E[0] = in[0] + in[3];
    E[1] = in[1] + in[2];
    O[0] = in[0] - in[3];
    O[1] = in[1] - in[2];
    out[0 * out_stride] = (kFwdTransform4[0][0] * E[0] +
                           kFwdTransform4[0][1] * E[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform4[2][0] * E[0] +
                           kFwdTransform4[2][1] * E[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform4[1][0] * O[0] +
                           kFwdTransform4[1][1] * O[1] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform4[3][0] * O[0] +
                           kFwdTransform4[3][1] * O[1] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[4], O[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int x = 0; x < 4; x++) {
      E[x] = in[x] + in[7 - x];
      O[x] = in[x] - in[7 - x];
    }
    EE[0] = E[0] + E[3];
    EO[0] = E[0] - E[3];
    EE[1] = E[1] + E[2];
    EO[1] = E[1] - E[2];

    out[0 * out_stride] = (kFwdTransform8[0][0] * EE[0] +
                           kFwdTransform8[0][1] * EE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform8[4][0] * EE[0] +
                           kFwdTransform8[4][1] * EE[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform8[2][0] * EO[0] +
                           kFwdTransform8[2][1] * EO[1] + add) >> shift;
    out[6 * out_stride] = (kFwdTransform8[6][0] * EO[0] +
                           kFwdTransform8[6][1] * EO[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform8[1][0] * O[0] +
                           kFwdTransform8[1][1] * O[1] +
                           kFwdTransform8[1][2] * O[2] +
                           kFwdTransform8[1][3] * O[3] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform8[3][0] * O[0] +
                           kFwdTransform8[3][1] * O[1] +
                           kFwdTransform8[3][2] * O[2] +
                           kFwdTransform8[3][3] * O[3] + add) >> shift;
    out[5 * out_stride] = (kFwdTransform8[5][0] * O[0] +
                           kFwdTransform8[5][1] * O[1] +
                           kFwdTransform8[5][2] * O[2] +
                           kFwdTransform8[5][3] * O[3] + add) >> shift;
    out[7 * out_stride] = (kFwdTransform8[7][0] * O[0] +
                           kFwdTransform8[7][1] * O[1] +
                           kFwdTransform8[7][2] * O[2] +
                           kFwdTransform8[7][3] * O[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[8], O[8];
  int EE[4], EO[4];
  int EEE[2], EEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      E[k] = in[k] + in[15 - k];
      O[k] = in[k] - in[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EE[k] = E[k] + E[7 - k];
      EO[k] = E[k] - E[7 - k];
    }
    EEE[0] = EE[0] + EE[3];
    EEO[0] = EE[0] - EE[3];
    EEE[1] = EE[1] + EE[2];
    EEO[1] = EE[1] - EE[2];
    out[0 * out_stride] = (kFwdTransform16[0][0] * EEE[0] +
                           kFwdTransform16[0][1] * EEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform16[8][0] * EEE[0] +
                           kFwdTransform16[8][1] * EEE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform16[4][0] * EEO[0] +
                           kFwdTransform16[4][1] * EEO[1] + add) >> shift;
    out[12 * out_stride] = (kFwdTransform16[12][0] * EEO[0] +
                            kFwdTransform16[12][1] * EEO[1] + add) >> shift;
    for (int k = 2; k < 16; k += 4) {
      out[k*out_stride] = (kFwdTransform16[k][0] * EO[0] +
                           kFwdTransform16[k][1] * EO[1] +
                           kFwdTransform16[k][2] * EO[2] +
                           kFwdTransform16[k][3] * EO[3] + add) >> shift;
    }
    for (int k = 1; k < 16; k += 2) {
      out[k*out_stride] = (kFwdTransform16[k][0] * O[0] +
                           kFwdTransform16[k][1] * O[1] +
                           kFwdTransform16[k][2] * O[2] +
                           kFwdTransform16[k][3] * O[3] +
                           kFwdTransform16[k][4] * O[4] +
                           kFwdTransform16[k][5] * O[5] +
                           kFwdTransform16[k][6] * O[6] +
                           kFwdTransform16[k][7] * O[7] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[16], O[16];
  int EE[8], EO[8];
  int EEE[4], EEO[4];
  int EEEE[2], EEEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      E[k] = in[k] + in[31 - k];
      O[k] = in[k] - in[31 - k];
    }
    for (int k = 0; k < 8; k++) {
      EE[k] = E[k] + E[15 - k];
      EO[k] = E[k] - E[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EEE[k] = EE[k] + EE[7 - k];
      EEO[k] = EE[k] - EE[7 - k];
    }
    EEEE[0] = EEE[0] + EEE[3];
    EEEO[0] = EEE[0] - EEE[3];
    EEEE[1] = EEE[1] + EEE[2];
    EEEO[1] = EEE[1] - EEE[2];
    out[0 * out_stride] = (kFwdTransform32[0][0] * EEEE[0] +
                           kFwdTransform32[0][1] * EEEE[1] + add) >> shift;
    out[16 * out_stride] = (kFwdTransform32[16][0] * EEEE[0] +
                            kFwdTransform32[16][1] * EEEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform32[8][0] * EEEO[0] +
                           kFwdTransform32[8][1] * EEEO[1] + add) >> shift;
    out[24 * out_stride] = (kFwdTransform32[24][0] * EEEO[0] +
                            kFwdTransform32[24][1] * EEEO[1] + add) >> shift;
    for (int k = 4; k < 32; k += 8) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EEO[0] +
                           kFwdTransform32[k][1] * EEO[1] +
                           kFwdTransform32[k][2] * EEO[2] +
                           kFwdTransform32[k][3] * EEO[3] + add) >> shift;
    }
    for (int k = 2; k < 32; k += 4) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EO[0] +
                           kFwdTransform32[k][1] * EO[1] +
                           kFwdTransform32[k][2] * EO[2] +
                           kFwdTransform32[k][3] * EO[3] +
                           kFwdTransform32[k][4] * EO[4] +
                           kFwdTransform32[k][5] * EO[5] +
                           kFwdTransform32[k][6] * EO[6] +
                           kFwdTransform32[k][7] * EO[7] + add) >> shift;
    }
    for (int k = 1; k < 32; k += 2) {
      out[k*out_stride] = (kFwdTransform32[k][0] * O[0] +
                           kFwdTransform32[k][1] * O[1] +
                           kFwdTransform32[k][2] * O[2] +
                           kFwdTransform32[k][3] * O[3] +
                           kFwdTransform32[k][4] * O[4] +
                           kFwdTransform32[k][5] * O[5] +
                           kFwdTransform32[k][6] * O[6] +
                           kFwdTransform32[k][7] * O[7] +
                           kFwdTransform32[k][8] * O[8] +
                           kFwdTransform32[k][9] * O[9] +
                           kFwdTransform32[k][10] * O[10] +
                           kFwdTransform32[k][11] * O[11] +
                           kFwdTransform32[k][12] * O[12] +
                           kFwdTransform32[k][13] * O[13] +
                           kFwdTransform32[k][14] * O[14] +
                           kFwdTransform32[k][15] * O[15] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

template<bool ZeroWdt, bool ZeroHgt>
void
ForwardTransform::FwdPartialTransform64(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[32], O[32];
  int EE[16], EO[16];
  int EEE[8], EEO[8];
  int EEEE[4], EEEO[4];
  int EEEEE[2], EEEEO[2];
  const int tx_lines = ZeroHgt ? 32 : 64;
  const int tx_cols = ZeroWdt ? std::min(32, lines) : lines;
  Coeff *orig_out = out;

  for (int y = 0; y < tx_cols; y++) {
    for (int k = 0; k < 32; k++) {
      E[k] = in[k] + in[63 - k];
      O[k] = in[k] - in[63 - k];
    }
    for (int k = 0; k < 16; k++) {
      EE[k] = E[k] + E[31 - k];
      EO[k] = E[k] - E[31 - k];
    }
    for (int k = 0; k < 8; k++) {
      EEE[k] = EE[k] + EE[15 - k];
      EEO[k] = EE[k] - EE[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EEEE[k] = EEE[k] + EEE[7 - k];
      EEEO[k] = EEE[k] - EEE[7 - k];
    }
    EEEEE[0] = EEEE[0] + EEEE[3];
    EEEEO[0] = EEEE[0] - EEEE[3];
    EEEEE[1] = EEEE[1] + EEEE[2];
    EEEEO[1] = EEEE[1] - EEEE[2];
    out[0 * out_stride] = (kFwdTransform64[0][0] * EEEEE[0] +
                           kFwdTransform64[0][1] * EEEEE[1] + add) >> shift;
    out[16 * out_stride] = (kFwdTransform64[16][0] * EEEEO[0] +
                            kFwdTransform64[16][1] * EEEEO[1] + add) >> shift;
    if (tx_lines > 32) {
      out[32 * out_stride] = (kFwdTransform64[32][0] * EEEEE[0] +
                              kFwdTransform64[32][1] * EEEEE[1] + add) >> shift;
      out[48 * out_stride] = (kFwdTransform64[48][0] * EEEEO[0] +
                              kFwdTransform64[48][1] * EEEEO[1] + add) >> shift;
    }
    for (int k = 8; k < tx_lines; k += 16) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EEEO[0] +
                           kFwdTransform64[k][1] * EEEO[1] +
                           kFwdTransform64[k][2] * EEEO[2] +
                           kFwdTransform64[k][3] * EEEO[3] + add) >> shift;
    }
    for (int k = 4; k < tx_lines; k += 8) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EEO[0] +
                           kFwdTransform64[k][1] * EEO[1] +
                           kFwdTransform64[k][2] * EEO[2] +
                           kFwdTransform64[k][3] * EEO[3] +
                           kFwdTransform64[k][4] * EEO[4] +
                           kFwdTransform64[k][5] * EEO[5] +
                           kFwdTransform64[k][6] * EEO[6] +
                           kFwdTransform64[k][7] * EEO[7] + add) >> shift;
    }
    for (int k = 2; k < tx_lines; k += 4) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EO[0] +
                           kFwdTransform64[k][1] * EO[1] +
                           kFwdTransform64[k][2] * EO[2] +
                           kFwdTransform64[k][3] * EO[3] +
                           kFwdTransform64[k][4] * EO[4] +
                           kFwdTransform64[k][5] * EO[5] +
                           kFwdTransform64[k][6] * EO[6] +
                           kFwdTransform64[k][7] * EO[7] +
                           kFwdTransform64[k][8] * EO[8] +
                           kFwdTransform64[k][9] * EO[9] +
                           kFwdTransform64[k][10] * EO[10] +
                           kFwdTransform64[k][11] * EO[11] +
                           kFwdTransform64[k][12] * EO[12] +
                           kFwdTransform64[k][13] * EO[13] +
                           kFwdTransform64[k][14] * EO[14] +
                           kFwdTransform64[k][15] * EO[15] + add) >> shift;
    }
    for (int k = 1; k < tx_lines; k += 2) {
      out[k*out_stride] = (kFwdTransform64[k][0] * O[0] +
                           kFwdTransform64[k][1] * O[1] +
                           kFwdTransform64[k][2] * O[2] +
                           kFwdTransform64[k][3] * O[3] +
                           kFwdTransform64[k][4] * O[4] +
                           kFwdTransform64[k][5] * O[5] +
                           kFwdTransform64[k][6] * O[6] +
                           kFwdTransform64[k][7] * O[7] +
                           kFwdTransform64[k][8] * O[8] +
                           kFwdTransform64[k][9] * O[9] +
                           kFwdTransform64[k][10] * O[10] +
                           kFwdTransform64[k][11] * O[11] +
                           kFwdTransform64[k][12] * O[12] +
                           kFwdTransform64[k][13] * O[13] +
                           kFwdTransform64[k][14] * O[14] +
                           kFwdTransform64[k][15] * O[15] +
                           kFwdTransform64[k][16] * O[16] +
                           kFwdTransform64[k][17] * O[17] +
                           kFwdTransform64[k][18] * O[18] +
                           kFwdTransform64[k][19] * O[19] +
                           kFwdTransform64[k][20] * O[20] +
                           kFwdTransform64[k][21] * O[21] +
                           kFwdTransform64[k][22] * O[22] +
                           kFwdTransform64[k][23] * O[23] +
                           kFwdTransform64[k][24] * O[24] +
                           kFwdTransform64[k][25] * O[25] +
                           kFwdTransform64[k][26] * O[26] +
                           kFwdTransform64[k][27] * O[27] +
                           kFwdTransform64[k][28] * O[28] +
                           kFwdTransform64[k][29] * O[29] +
                           kFwdTransform64[k][30] * O[30] +
                           kFwdTransform64[k][31] * O[31] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
  if (ZeroWdt) {
    Coeff *tmp = orig_out;
    for (int y = 0; y < tx_cols; y++) {
      memset(tmp + tx_lines, 0, sizeof(Coeff)*tx_lines);
      tmp += out_stride;
    }
  }
  if (ZeroHgt) {
    Coeff *tmp = orig_out + tx_lines * out_stride;
    for (int y = tx_lines; y < lines; y++) {
      std::memset(tmp, 0, sizeof(Coeff) * 64);
      tmp += out_stride;
    }
  }
}

ScanOrder TransformHelper::DetermineScanOrder(const CodingUnit &cu,
                                              YuvComponent comp) {
  static const int kSizeThreshold = 16;
  if (cu.GetPredMode() != PredictionMode::kIntra ||
      Restrictions::Get().disable_transform_adaptive_scan_order) {
    return ScanOrder::kDiagonal;
  }
  if (cu.GetWidth(YuvComponent::kY) >= kSizeThreshold ||
      cu.GetHeight(YuvComponent::kY) >= kSizeThreshold) {
    return ScanOrder::kDiagonal;
  }
  int intra_mode = static_cast<int>(cu.GetIntraMode(comp));
  if (std::abs(intra_mode - IntraMode::kVertical) < 5) {
    return ScanOrder::kHorizontal;
  }
  if (std::abs(intra_mode - IntraMode::kHorizontal) < 5) {
    return ScanOrder::kVertical;
  }
  return ScanOrder::kDiagonal;
}

const uint16_t *TransformHelper::GetScanTable(int width, int height,
                                              ScanOrder scan_order) {
  assert(width == height);
  switch (width) {
    case 2:
      return kScanOrder2x2[static_cast<int>(scan_order)];
    case 4:
      return kScanOrder4x4[static_cast<int>(scan_order)];
    case 8:
      return kScanOrder8x8[static_cast<int>(scan_order)];
    case 16:
      return kScanOrder16x16Diag;
    case 32:
      return kScanOrder32x32Diag;
    case 64:
      return kScanOrder64x64Diag;
    default:
      assert(0);
      return nullptr;
      break;
  }
}

const uint16_t *TransformHelper::GetScanTableSubblock(int width, int height,
                                                      ScanOrder scan_order) {
  assert(width == height);
  switch (width) {
    case 2:
      return kScanOrder2x2[static_cast<int>(ScanOrder::kDiagonal)];
    case 4:
      return kScanOrder2x2[static_cast<int>(ScanOrder::kDiagonal)];
    case 8:
      return kScanOrder2x2[static_cast<int>(scan_order == ScanOrder::kVertical ?
                                            ScanOrder::kDiagonal : scan_order)];
    case 16:
      return kScanOrder4x4[static_cast<int>(ScanOrder::kDiagonal)];
    case 32:
      return kScanOrder8x8SubBlock;
    case 64:
      return kScanOrder16x16SubBlock;
    default:
      assert(0);
      return nullptr;
  }
}

}   // namespace xvc
