/******************************************************************************
* Copyright (C) 2017, Divideon. All rights reserved.
* No part of this code may be reproduced in any form
* without the written permission of the copyright holder.
******************************************************************************/

#include "xvc_common_lib/transform.h"

#include <cassert>
#include <cmath>
#include <cstring>

#include "xvc_common_lib/intra_prediction.h"
#include "xvc_common_lib/restrictions.h"
#include "xvc_common_lib/utils.h"

#if _MSC_VER
// Disable warning 4244 in Visual Studio in order to be able to do implicit
// type conversions (without static_cast).
#pragma warning(disable:4244)
#endif

namespace xvc {

static const int16_t kInvTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kInvTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kInvTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kInvTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const int16_t kFwdTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kFwdTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kFwdTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kFwdTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const uint16_t
kScanOrder2x2[static_cast<int>(ScanOrder::kTotalNumber)][2 * 2] = {
  { 0, 2, 1, 3 },
  { 0, 1, 2, 3 },
  { 0, 2, 1, 3 }
};

static const uint16_t
kScanOrder4x4[static_cast<int>(ScanOrder::kTotalNumber)][4 * 4] = {
  { 0,  4,  1,  8,  5,  2, 12,  9,  6,  3, 13, 10,  7, 14, 11, 15 },
  { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
  { 0,  4,  8, 12,  1,  5,  9, 13,  2,  6, 10, 14,  3,  7, 11, 15 },
};

static const uint16_t
kScanOrder8x8[static_cast<int>(ScanOrder::kTotalNumber)][8 * 8] = {
  { 0, 8, 1, 16, 9, 2, 24, 17, 10, 3, 25, 18, 11, 26, 19, 27, 32, 40, 33, 48,
  41, 34, 56, 49, 42, 35, 57, 50, 43, 58, 51, 59, 4, 12, 5, 20, 13, 6, 28, 21,
  14, 7, 29, 22, 15, 30, 23, 31, 36, 44, 37, 52, 45, 38, 60, 53, 46, 39, 61,
  54, 47, 62, 55, 63 },
  { 0, 1, 2, 3, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 4, 5, 6, 7, 12,
  13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43,
  48, 49, 50, 51, 56, 57, 58, 59, 36, 37, 38, 39, 44, 45, 46, 47, 52, 53, 54,
  55, 60, 61, 62, 63 },
  { 0, 8, 16, 24, 1, 9, 17, 25, 2, 10, 18, 26, 3, 11, 19, 27, 32, 40, 48, 56,
  33, 41, 49, 57, 34, 42, 50, 58, 35, 43, 51, 59, 4, 12, 20, 28, 5, 13, 21, 29,
  6, 14, 22, 30, 7, 15, 23, 31, 36, 44, 52, 60, 37, 45, 53, 61, 38, 46, 54, 62,
  39, 47, 55, 63 }
};

static const uint16_t
kScanOrder8x8SubBlock[1][8 * 8] = {
  0, 8, 1, 16, 9, 2, 24, 17, 10, 3, 32, 25, 18, 11, 4, 40, 33, 26, 19, 12, 5,
  48, 41, 34, 27, 20, 13, 6, 56, 49, 42, 35, 28, 21, 14, 7, 57, 50, 43, 36, 29,
  22, 15, 58, 51, 44, 37, 30, 23, 59, 52, 45, 38, 31, 60, 53, 46, 39, 61, 54,
  47, 62, 55, 63
};

static const uint16_t kScanOrder16x16Diag[16 * 16] = {
  0, 16, 1, 32, 17, 2, 48, 33, 18, 3, 49, 34, 19, 50, 35, 51, 64, 80, 65, 96,
  81, 66, 112, 97, 82, 67, 113, 98, 83, 114, 99, 115, 4, 20, 5, 36, 21, 6, 52,
  37, 22, 7, 53, 38, 23, 54, 39, 55, 128, 144, 129, 160, 145, 130, 176, 161,
  146, 131, 177, 162, 147, 178, 163, 179, 68, 84, 69, 100, 85, 70, 116, 101,
  86, 71, 117, 102, 87, 118, 103, 119, 8, 24, 9, 40, 25, 10, 56, 41, 26, 11,
  57, 42, 27, 58, 43, 59, 192, 208, 193, 224, 209, 194, 240, 225, 210, 195,
  241, 226, 211, 242, 227, 243, 132, 148, 133, 164, 149, 134, 180, 165, 150,
  135, 181, 166, 151, 182, 167, 183, 72, 88, 73, 104, 89, 74, 120, 105, 90, 75,
  121, 106, 91, 122, 107, 123, 12, 28, 13, 44, 29, 14, 60, 45, 30, 15, 61, 46,
  31, 62, 47, 63, 196, 212, 197, 228, 213, 198, 244, 229, 214, 199, 245, 230,
  215, 246, 231, 247, 136, 152, 137, 168, 153, 138, 184, 169, 154, 139, 185,
  170, 155, 186, 171, 187, 76, 92, 77, 108, 93, 78, 124, 109, 94, 79, 125, 110,
  95, 126, 111, 127, 200, 216, 201, 232, 217, 202, 248, 233, 218, 203, 249,
  234, 219, 250, 235, 251, 140, 156, 141, 172, 157, 142, 188, 173, 158, 143,
  189, 174, 159, 190, 175, 191, 204, 220, 205, 236, 221, 206, 252, 237, 222,
  207, 253, 238, 223, 254, 239, 255
};

const uint16_t kScanOrder32x32Diag[32 * 32] = {
  0, 32, 1, 64, 33, 2, 96, 65, 34, 3, 97, 66, 35, 98, 67, 99, 128, 160, 129,
  192, 161, 130, 224, 193, 162, 131, 225, 194, 163, 226, 195, 227, 4, 36, 5,
  68, 37, 6, 100, 69, 38, 7, 101, 70, 39, 102, 71, 103, 256, 288, 257, 320,
  289, 258, 352, 321, 290, 259, 353, 322, 291, 354, 323, 355,  132, 164, 133,
  196, 165, 134, 228, 197, 166, 135, 229, 198, 167, 230, 199, 231, 8, 40, 9,
  72, 41, 10, 104, 73, 42, 11, 105, 74, 43, 106, 75, 107,  384, 416, 385, 448,
  417, 386, 480, 449, 418, 387, 481, 450, 419, 482, 451, 483, 260, 292, 261,
  324, 293, 262, 356, 325, 294, 263, 357, 326, 295, 358, 327, 359,  136, 168,
  137, 200, 169, 138, 232, 201, 170, 139, 233, 202, 171, 234, 203, 235, 12, 44,
  13, 76, 45, 14, 108, 77, 46, 15, 109, 78, 47, 110, 79, 111,  512, 544, 513,
  576, 545, 514, 608, 577, 546, 515, 609, 578, 547, 610, 579, 611, 388, 420,
  389, 452, 421, 390, 484, 453, 422, 391, 485, 454, 423, 486, 455, 487,  264,
  296, 265, 328, 297, 266, 360, 329, 298, 267, 361, 330, 299, 362, 331, 363,
  140, 172, 141, 204, 173, 142, 236, 205, 174, 143, 237, 206, 175, 238, 207,
  239,  16, 48, 17, 80, 49, 18, 112, 81, 50, 19, 113, 82, 51, 114, 83, 115,
  640, 672, 641, 704, 673, 642, 736, 705, 674, 643, 737, 706, 675, 738, 707,
  739,  516, 548, 517, 580, 549, 518, 612, 581, 550, 519, 613, 582, 551, 614,
  583, 615, 392, 424, 393, 456, 425, 394, 488, 457, 426, 395, 489, 458, 427,
  490, 459, 491,  268, 300, 269, 332, 301, 270, 364, 333, 302, 271, 365, 334,
  303, 366, 335, 367, 144, 176, 145, 208, 177, 146, 240, 209, 178, 147, 241,
  210, 179, 242, 211, 243,  20, 52, 21, 84, 53, 22, 116, 85, 54, 23, 117, 86,
  55, 118, 87, 119, 768, 800, 769, 832, 801, 770, 864, 833, 802, 771, 865, 834,
  803, 866, 835, 867,  644, 676, 645, 708, 677, 646, 740, 709, 678, 647, 741,
  710, 679, 742, 711, 743, 520, 552, 521, 584, 553, 522, 616, 585, 554, 523,
  617, 586, 555, 618, 587, 619,  396, 428, 397, 460, 429, 398, 492, 461, 430,
  399, 493, 462, 431, 494, 463, 495, 272, 304, 273, 336, 305, 274, 368, 337,
  306, 275, 369, 338, 307, 370, 339, 371,  148, 180, 149, 212, 181, 150, 244,
  213, 182, 151, 245, 214, 183, 246, 215, 247, 24, 56, 25, 88, 57, 26, 120, 89,
  58, 27, 121, 90, 59, 122, 91, 123,  896, 928, 897, 960, 929, 898, 992, 961,
  930, 899, 993, 962, 931, 994, 963, 995, 772, 804, 773, 836, 805, 774, 868,
  837, 806, 775, 869, 838, 807, 870, 839, 871,  648, 680, 649, 712, 681, 650,
  744, 713, 682, 651, 745, 714, 683, 746, 715, 747, 524, 556, 525, 588, 557,
  526, 620, 589, 558, 527, 621, 590, 559, 622, 591, 623,  400, 432, 401, 464,
  433, 402, 496, 465, 434, 403, 497, 466, 435, 498, 467, 499, 276, 308, 277,
  340, 309, 278, 372, 341, 310, 279, 373, 342, 311, 374, 343, 375,  152, 184,
  153, 216, 185, 154, 248, 217, 186, 155, 249, 218, 187, 250, 219, 251, 28, 60,
  29, 92, 61, 30, 124, 93, 62, 31, 125, 94, 63, 126, 95, 127,  900, 932, 901,
  964, 933, 902, 996, 965, 934, 903, 997, 966, 935, 998, 967, 999, 776, 808,
  777, 840, 809, 778, 872, 841, 810, 779, 873, 842, 811, 874, 843, 875,  652,
  684, 653, 716, 685, 654, 748, 717, 686, 655, 749, 718, 687, 750, 719, 751,
  528, 560, 529, 592, 561, 530, 624, 593, 562, 531, 625, 594, 563, 626, 595,
  627,  404, 436, 405, 468, 437, 406, 500, 469, 438, 407, 501, 470, 439, 502,
  471, 503, 280, 312, 281, 344, 313, 282, 376, 345, 314, 283, 377, 346, 315,
  378, 347, 379,  156, 188, 157, 220, 189, 158, 252, 221, 190, 159, 253, 222,
  191, 254, 223, 255, 904, 936, 905, 968, 937, 906, 1000, 969, 938, 907, 1001,
  970, 939, 1002, 971, 1003,  780, 812, 781, 844, 813, 782, 876, 845, 814, 783,
  877, 846, 815, 878, 847, 879, 656, 688, 657, 720, 689, 658, 752, 721, 690,
  659, 753, 722, 691, 754, 723, 755,  532, 564, 533, 596, 565, 534, 628, 597,
  566, 535, 629, 598, 567, 630, 599, 631, 408, 440, 409, 472, 441, 410, 504,
  473, 442, 411, 505, 474, 443, 506, 475, 507,  284, 316, 285, 348, 317, 286,
  380, 349, 318, 287, 381, 350, 319, 382, 351, 383, 908, 940, 909, 972, 941,
  910, 1004, 973, 942, 911, 1005, 974, 943, 1006, 975, 1007,  784, 816, 785,
  848, 817, 786, 880, 849, 818, 787, 881, 850, 819, 882, 851, 883, 660, 692,
  661, 724, 693, 662, 756, 725, 694, 663, 757, 726, 695, 758, 727, 759,  536,
  568, 537, 600, 569, 538, 632, 601, 570, 539, 633, 602, 571, 634, 603, 635,
  412, 444, 413, 476, 445, 414, 508, 477, 446, 415, 509, 478, 447, 510, 479,
  511,  912, 944, 913, 976, 945, 914, 1008, 977, 946, 915, 1009, 978, 947,
  1010, 979, 1011, 788, 820, 789, 852, 821, 790, 884, 853, 822, 791, 885, 854,
  823, 886, 855, 887,  664, 696, 665, 728, 697, 666, 760, 729, 698, 667, 761,
  730, 699, 762, 731, 763, 540, 572, 541, 604, 573, 542, 636, 605, 574, 543,
  637, 606, 575, 638, 607, 639,  916, 948, 917, 980, 949, 918, 1012, 981, 950,
  919, 1013, 982, 951, 1014, 983, 1015, 792, 824, 793, 856, 825, 794, 888, 857,
  826, 795, 889, 858, 827, 890, 859, 891,  668, 700, 669, 732, 701, 670, 764,
  733, 702, 671, 765, 734, 703, 766, 735, 767, 920, 952, 921, 984, 953, 922,
  1016, 985, 954, 923, 1017, 986, 955, 1018, 987, 1019,  796, 828, 797, 860,
  829, 798, 892, 861, 830, 799, 893, 862, 831, 894, 863, 895, 924, 956, 925,
  988, 957, 926, 1020, 989, 958, 927, 1021, 990, 959, 1022, 991, 1023
};

const std::array<uint8_t, 128> TransformHelper::kLastPosGroupIdx = { {
  0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13
} };

const std::array<uint8_t, 14> TransformHelper::kLastPosMinInGroup = { {
  0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96
} };

void InverseTransform::Transform(int size, const Coeff *coeff,
                                 ptrdiff_t coeff_stride, Residual *resi,
                                 ptrdiff_t resi_stride, bool dst_transform) {
  if (dst_transform) {
    return TransformDST(size, coeff, coeff_stride, resi, resi_stride);
  }
  switch (size) {
    case 4:
      InvPartialTransform4(7, size, coeff, coeff_stride, &coeff_temp_[0],
                           kBufferStride_);
      InvPartialTransform4(20 - bitdepth_, size, &coeff_temp_[0],
                           kBufferStride_, resi, resi_stride);
      break;
    case 8:
      InvPartialTransform8(7, size, coeff, coeff_stride, &coeff_temp_[0],
                           kBufferStride_);
      InvPartialTransform8(20 - bitdepth_, size, &coeff_temp_[0],
                           kBufferStride_, resi, resi_stride);
      break;
    case 16:
      InvPartialTransform16(7, size, coeff, coeff_stride, &coeff_temp_[0],
                            kBufferStride_);
      InvPartialTransform16(20 - bitdepth_, size, &coeff_temp_[0],
                            kBufferStride_, resi, resi_stride);
      break;
    case 32:
      InvPartialTransform32(7, size, coeff, coeff_stride, &coeff_temp_[0],
                            kBufferStride_);
      InvPartialTransform32(20 - bitdepth_, size, &coeff_temp_[0],
                            kBufferStride_, resi, resi_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void InverseTransform::TransformDST(int size, const Coeff *coeff,
                                    ptrdiff_t coeff_stride, Residual *resi,
                                    ptrdiff_t resi_stride) {
  switch (size) {
    case 4:
      InvPartialDST4(7, coeff, coeff_stride, &coeff_temp_[0], kBufferStride_);
      InvPartialDST4(20 - bitdepth_, &coeff_temp_[0], kBufferStride_, resi,
                     resi_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void InverseTransform::InvPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int c[4];

  for (int i = 0; i < 4; i++) {
    c[0] = in[0] + in[2 * in_stride];
    c[1] = in[2 * in_stride] + in[3 * in_stride];
    c[2] = in[0] - in[3 * in_stride];
    c[3] = 74 * in[1 * in_stride];
    out[0] = util::Clip3((29 * c[0] + 55 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((55 * c[2] - 29 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((74 * (in[i] - in[2 * in_stride] +
                                in[3 * in_stride]) + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((55 * c[0] + 29 * c[2] - c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[2], E[2];

  for (int y = 0; y < lines; y++) {
    O[0] = kInvTransform4[1][0] * in[1 * in_stride] +
      kInvTransform4[3][0] * in[3 * in_stride];
    O[1] = kInvTransform4[1][1] * in[1 * in_stride] +
      kInvTransform4[3][1] * in[3 * in_stride];
    E[0] = kInvTransform4[0][0] * in[0 * in_stride] +
      kInvTransform4[2][0] * in[2 * in_stride];
    E[1] = kInvTransform4[0][1] * in[0 * in_stride] +
      kInvTransform4[2][1] * in[2 * in_stride];
    out[0] = util::Clip3((E[0] + O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((E[1] + O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((E[1] - O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((E[0] - O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[4], E[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 4; k++) {
      O[k] = kInvTransform8[1][k] * in[1 * in_stride] +
        kInvTransform8[3][k] * in[3 * in_stride] +
        kInvTransform8[5][k] * in[5 * in_stride] +
        kInvTransform8[7][k] * in[7 * in_stride];
    }
    EO[0] = kInvTransform8[2][0] * in[2 * in_stride] +
      kInvTransform8[6][0] * in[6 * in_stride];
    EO[1] = kInvTransform8[2][1] * in[2 * in_stride] +
      kInvTransform8[6][1] * in[6 * in_stride];
    EE[0] = kInvTransform8[0][0] * in[0 * in_stride] +
      kInvTransform8[4][0] * in[4 * in_stride];
    EE[1] = kInvTransform8[0][1] * in[0 * in_stride] +
      kInvTransform8[4][1] * in[4 * in_stride];
    E[0] = EE[0] + EO[0];
    E[3] = EE[0] - EO[0];
    E[1] = EE[1] + EO[1];
    E[2] = EE[1] - EO[1];
    for (int k = 0; k < 4; ++k) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 4] = util::Clip3((E[3 - k] - O[3 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[8], E[8];
  int EO[4], EE[4];
  int EEO[2], EEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      O[k] = kInvTransform16[1][k] * in[in_stride]
        + kInvTransform16[3][k] * in[3 * in_stride]
        + kInvTransform16[5][k] * in[5 * in_stride]
        + kInvTransform16[7][k] * in[7 * in_stride]
        + kInvTransform16[9][k] * in[9 * in_stride]
        + kInvTransform16[11][k] * in[11 * in_stride]
        + kInvTransform16[13][k] * in[13 * in_stride]
        + kInvTransform16[15][k] * in[15 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EO[k] = kInvTransform16[2][k] * in[2 * in_stride]
        + kInvTransform16[6][k] * in[6 * in_stride]
        + kInvTransform16[10][k] * in[10 * in_stride]
        + kInvTransform16[14][k] * in[14 * in_stride];
    }
    EEO[0] = kInvTransform16[4][0] * in[4 * in_stride]
      + kInvTransform16[12][0] * in[12 * in_stride];
    EEE[0] = kInvTransform16[0][0] * in[0 * in_stride]
      + kInvTransform16[8][0] * in[8 * in_stride];
    EEO[1] = kInvTransform16[4][1] * in[4 * in_stride]
      + kInvTransform16[12][1] * in[12 * in_stride];
    EEE[1] = kInvTransform16[0][1] * in[0 * in_stride]
      + kInvTransform16[8][1] * in[8 * in_stride];
    for (int k = 0; k < 2; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 2] = EEE[1 - k] - EEO[1 - k];
    }
    for (int k = 0; k < 4; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 4] = EE[3 - k] - EO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 8] = util::Clip3((E[7 - k] - O[7 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[16], E[16];
  int EO[8], EE[8];
  int EEO[4], EEE[4];
  int EEEO[2], EEEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      O[k] =
        kInvTransform32[1][k] * in[1 * in_stride] +
        kInvTransform32[3][k] * in[3 * in_stride] +
        kInvTransform32[5][k] * in[5 * in_stride] +
        kInvTransform32[7][k] * in[7 * in_stride] +
        kInvTransform32[9][k] * in[9 * in_stride] +
        kInvTransform32[11][k] * in[11 * in_stride] +
        kInvTransform32[13][k] * in[13 * in_stride] +
        kInvTransform32[15][k] * in[15 * in_stride] +
        kInvTransform32[17][k] * in[17 * in_stride] +
        kInvTransform32[19][k] * in[19 * in_stride] +
        kInvTransform32[21][k] * in[21 * in_stride] +
        kInvTransform32[23][k] * in[23 * in_stride] +
        kInvTransform32[25][k] * in[25 * in_stride] +
        kInvTransform32[27][k] * in[27 * in_stride] +
        kInvTransform32[29][k] * in[29 * in_stride] +
        kInvTransform32[31][k] * in[31 * in_stride];
    }

    for (int k = 0; k < 8; k++) {
      EO[k] =
        kInvTransform32[2][k] * in[2 * in_stride] +
        kInvTransform32[6][k] * in[6 * in_stride] +
        kInvTransform32[10][k] * in[10 * in_stride] +
        kInvTransform32[14][k] * in[14 * in_stride] +
        kInvTransform32[18][k] * in[18 * in_stride] +
        kInvTransform32[22][k] * in[22 * in_stride] +
        kInvTransform32[26][k] * in[26 * in_stride] +
        kInvTransform32[30][k] * in[30 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EEO[k] =
        kInvTransform32[4][k] * in[4 * in_stride] +
        kInvTransform32[12][k] * in[12 * in_stride] +
        kInvTransform32[20][k] * in[20 * in_stride] +
        kInvTransform32[28][k] * in[28 * in_stride];
    }
    EEEO[0] = kInvTransform32[8][0] * in[8 * in_stride] +
      kInvTransform32[24][0] * in[24 * in_stride];
    EEEO[1] = kInvTransform32[8][1] * in[8 * in_stride] +
      kInvTransform32[24][1] * in[24 * in_stride];
    EEEE[0] = kInvTransform32[0][0] * in[0] +
      kInvTransform32[16][0] * in[16 * in_stride];
    EEEE[1] = kInvTransform32[0][1] * in[0] +
      kInvTransform32[16][1] * in[16 * in_stride];
    EEE[0] = EEEE[0] + EEEO[0];
    EEE[3] = EEEE[0] - EEEO[0];
    EEE[1] = EEEE[1] + EEEO[1];
    EEE[2] = EEEE[1] - EEEO[1];
    for (int k = 0; k < 4; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 4] = EEE[3 - k] - EEO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 8] = EE[7 - k] - EO[7 - k];
    }
    for (int k = 0; k < 16; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 16] = util::Clip3((E[15 - k] - O[15 - k] + add) >> shift,
                                constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void ForwardTransform::Transform(int size, const Residual *resi,
                                 ptrdiff_t resi_stride, Coeff *coeff,
                                 ptrdiff_t coeff_stride, bool dst_transform) {
  if (dst_transform) {
    return TransformDST(size, resi, resi_stride, coeff, coeff_stride);
  }
  switch (size) {
    case 4:
      FwdPartialTransform4(1 + bitdepth_ - 8, size, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      FwdPartialTransform4(8, size, &coeff_temp_[0], kBufferStride_, coeff,
                           coeff_stride);
      break;
    case 8:
      FwdPartialTransform8(2 + bitdepth_ - 8, size, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      FwdPartialTransform8(9, size, &coeff_temp_[0], kBufferStride_, coeff,
                           coeff_stride);
      break;
    case 16:
      FwdPartialTransform16(3 + bitdepth_ - 8, size, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      FwdPartialTransform16(10, size, &coeff_temp_[0], kBufferStride_, coeff,
                            coeff_stride);
      break;
    case 32:
      FwdPartialTransform32(4 + bitdepth_ - 8, size, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      FwdPartialTransform32(11, size, &coeff_temp_[0], kBufferStride_, coeff,
                            coeff_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void ForwardTransform::TransformDST(int size, const Residual *resi,
                                    ptrdiff_t resi_stride, Coeff *coeff,
                                    ptrdiff_t coeff_stride) {
  switch (size) {
    case 4:
      FwdPartialDST4(1 + bitdepth_ - 8, resi, resi_stride, &coeff_temp_[0],
                     kBufferStride_);
      FwdPartialDST4(8, &coeff_temp_[0], kBufferStride_, coeff, coeff_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void ForwardTransform::FwdPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);

  for (int i = 0; i < 4; i++) {
    int c[4];
    c[0] = in[0] + in[3];
    c[1] = in[1] + in[3];
    c[2] = in[0] - in[1];
    c[3] = 74 * in[2];
    out[0 * out_stride] = (29 * c[0] + 55 * c[1] + c[3] + add) >> shift;
    out[1 * out_stride] = (74 * (in[0] + in[1] - in[3]) + add) >> shift;
    out[2 * out_stride] = (29 * c[2] + 55 * c[0] - c[3] + add) >> shift;
    out[3 * out_stride] = (55 * c[2] - 29 * c[1] + c[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[2], O[2];

  for (int y = 0; y < lines; y++) {
    E[0] = in[0] + in[3];
    E[1] = in[1] + in[2];
    O[0] = in[0] - in[3];
    O[1] = in[1] - in[2];
    out[0 * out_stride] = (kFwdTransform4[0][0] * E[0] +
                           kFwdTransform4[0][1] * E[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform4[2][0] * E[0] +
                           kFwdTransform4[2][1] * E[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform4[1][0] * O[0] +
                           kFwdTransform4[1][1] * O[1] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform4[3][0] * O[0] +
                           kFwdTransform4[3][1] * O[1] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[4], O[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int x = 0; x < 4; x++) {
      E[x] = in[x] + in[7 - x];
      O[x] = in[x] - in[7 - x];
    }
    EE[0] = E[0] + E[3];
    EO[0] = E[0] - E[3];
    EE[1] = E[1] + E[2];
    EO[1] = E[1] - E[2];

    out[0 * out_stride] = (kFwdTransform8[0][0] * EE[0] +
                           kFwdTransform8[0][1] * EE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform8[4][0] * EE[0] +
                           kFwdTransform8[4][1] * EE[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform8[2][0] * EO[0] +
                           kFwdTransform8[2][1] * EO[1] + add) >> shift;
    out[6 * out_stride] = (kFwdTransform8[6][0] * EO[0] +
                           kFwdTransform8[6][1] * EO[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform8[1][0] * O[0] +
                           kFwdTransform8[1][1] * O[1] +
                           kFwdTransform8[1][2] * O[2] +
                           kFwdTransform8[1][3] * O[3] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform8[3][0] * O[0] +
                           kFwdTransform8[3][1] * O[1] +
                           kFwdTransform8[3][2] * O[2] +
                           kFwdTransform8[3][3] * O[3] + add) >> shift;
    out[5 * out_stride] = (kFwdTransform8[5][0] * O[0] +
                           kFwdTransform8[5][1] * O[1] +
                           kFwdTransform8[5][2] * O[2] +
                           kFwdTransform8[5][3] * O[3] + add) >> shift;
    out[7 * out_stride] = (kFwdTransform8[7][0] * O[0] +
                           kFwdTransform8[7][1] * O[1] +
                           kFwdTransform8[7][2] * O[2] +
                           kFwdTransform8[7][3] * O[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[8], O[8];
  int EE[4], EO[4];
  int EEE[2], EEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      E[k] = in[k] + in[15 - k];
      O[k] = in[k] - in[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EE[k] = E[k] + E[7 - k];
      EO[k] = E[k] - E[7 - k];
    }
    EEE[0] = EE[0] + EE[3];
    EEO[0] = EE[0] - EE[3];
    EEE[1] = EE[1] + EE[2];
    EEO[1] = EE[1] - EE[2];
    out[0 * out_stride] = (kFwdTransform16[0][0] * EEE[0] +
                           kFwdTransform16[0][1] * EEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform16[8][0] * EEE[0] +
                           kFwdTransform16[8][1] * EEE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform16[4][0] * EEO[0] +
                           kFwdTransform16[4][1] * EEO[1] + add) >> shift;
    out[12 * out_stride] = (kFwdTransform16[12][0] * EEO[0] +
                            kFwdTransform16[12][1] * EEO[1] + add) >> shift;
    for (int k = 2; k < 16; k += 4) {
      out[k*out_stride] = (kFwdTransform16[k][0] * EO[0] +
                           kFwdTransform16[k][1] * EO[1] +
                           kFwdTransform16[k][2] * EO[2] +
                           kFwdTransform16[k][3] * EO[3] + add) >> shift;
    }
    for (int k = 1; k < 16; k += 2) {
      out[k*out_stride] = (kFwdTransform16[k][0] * O[0] +
                           kFwdTransform16[k][1] * O[1] +
                           kFwdTransform16[k][2] * O[2] +
                           kFwdTransform16[k][3] * O[3] +
                           kFwdTransform16[k][4] * O[4] +
                           kFwdTransform16[k][5] * O[5] +
                           kFwdTransform16[k][6] * O[6] +
                           kFwdTransform16[k][7] * O[7] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[16], O[16];
  int EE[8], EO[8];
  int EEE[4], EEO[4];
  int EEEE[2], EEEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      E[k] = in[k] + in[31 - k];
      O[k] = in[k] - in[31 - k];
    }
    for (int k = 0; k < 8; k++) {
      EE[k] = E[k] + E[15 - k];
      EO[k] = E[k] - E[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EEE[k] = EE[k] + EE[7 - k];
      EEO[k] = EE[k] - EE[7 - k];
    }
    EEEE[0] = EEE[0] + EEE[3];
    EEEO[0] = EEE[0] - EEE[3];
    EEEE[1] = EEE[1] + EEE[2];
    EEEO[1] = EEE[1] - EEE[2];
    out[0 * out_stride] = (kFwdTransform32[0][0] * EEEE[0] +
                           kFwdTransform32[0][1] * EEEE[1] + add) >> shift;
    out[16 * out_stride] = (kFwdTransform32[16][0] * EEEE[0] +
                            kFwdTransform32[16][1] * EEEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform32[8][0] * EEEO[0] +
                           kFwdTransform32[8][1] * EEEO[1] + add) >> shift;
    out[24 * out_stride] = (kFwdTransform32[24][0] * EEEO[0] +
                            kFwdTransform32[24][1] * EEEO[1] + add) >> shift;
    for (int k = 4; k < 32; k += 8) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EEO[0] +
                           kFwdTransform32[k][1] * EEO[1] +
                           kFwdTransform32[k][2] * EEO[2] +
                           kFwdTransform32[k][3] * EEO[3] + add) >> shift;
    }
    for (int k = 2; k < 32; k += 4) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EO[0] +
                           kFwdTransform32[k][1] * EO[1] +
                           kFwdTransform32[k][2] * EO[2] +
                           kFwdTransform32[k][3] * EO[3] +
                           kFwdTransform32[k][4] * EO[4] +
                           kFwdTransform32[k][5] * EO[5] +
                           kFwdTransform32[k][6] * EO[6] +
                           kFwdTransform32[k][7] * EO[7] + add) >> shift;
    }
    for (int k = 1; k < 32; k += 2) {
      out[k*out_stride] = (kFwdTransform32[k][0] * O[0] +
                           kFwdTransform32[k][1] * O[1] +
                           kFwdTransform32[k][2] * O[2] +
                           kFwdTransform32[k][3] * O[3] +
                           kFwdTransform32[k][4] * O[4] +
                           kFwdTransform32[k][5] * O[5] +
                           kFwdTransform32[k][6] * O[6] +
                           kFwdTransform32[k][7] * O[7] +
                           kFwdTransform32[k][8] * O[8] +
                           kFwdTransform32[k][9] * O[9] +
                           kFwdTransform32[k][10] * O[10] +
                           kFwdTransform32[k][11] * O[11] +
                           kFwdTransform32[k][12] * O[12] +
                           kFwdTransform32[k][13] * O[13] +
                           kFwdTransform32[k][14] * O[14] +
                           kFwdTransform32[k][15] * O[15] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

ScanOrder TransformHelper::DetermineScanOrder(const CodingUnit &cu,
                                              YuvComponent comp) {
  if (cu.GetPredMode() != PredictionMode::kIntra ||
      Restrictions::Get().disable_transform_adaptive_scan_order) {
    return ScanOrder::kDiagonal;
  }
  int block_size;
  switch (cu.GetWidth(comp)) {
    case  2: block_size = 6; break;
    case  4: block_size = 5; break;
    case  8: block_size = 4; break;
    case 16: block_size = 3; break;
    case 32: block_size = 2; break;
    case 64: block_size = 1; break;
    default: block_size = 0; break;
  }
  if (util::IsLuma(comp)) {
    if (block_size <= 3 || block_size >= 6) {
      return ScanOrder::kDiagonal;
    }
  } else if (block_size <= 4 || block_size >= 7) {
    return ScanOrder::kDiagonal;
  }
  int intra_mode = static_cast<int>(cu.GetIntraMode(comp));
  if (std::abs(intra_mode - IntraMode::kVertical) < 5) {
    return ScanOrder::kHorizontal;
  }
  if (std::abs(intra_mode - IntraMode::kHorizontal) < 5) {
    return ScanOrder::kVertical;
  }
  return ScanOrder::kDiagonal;
}

const uint16_t *TransformHelper::GetScanTable(int width, int height,
                                              ScanOrder scan_order) {
  switch (width) {
    case 4:
      return kScanOrder4x4[static_cast<int>(scan_order)];
    case 8:
      return kScanOrder8x8[static_cast<int>(scan_order)];
    case 16:
      return kScanOrder16x16Diag;
    case 32:
      return kScanOrder32x32Diag;
    default:
      break;
  }
  assert(0);
  return nullptr;
}

const uint16_t *TransformHelper::GetScanTableSubblock(int width, int height,
                                                      ScanOrder scan_order) {
  if (width == 4 && height == 4) {
    return kScanOrder2x2[static_cast<int>(ScanOrder::kDiagonal)];
  }
  if (width == 8 && height == 8) {
    scan_order =
      scan_order == ScanOrder::kVertical ? ScanOrder::kDiagonal : scan_order;
    return kScanOrder2x2[static_cast<int>(scan_order)];
  }
  if (width == 16 && height == 16) {
    return kScanOrder4x4[static_cast<int>(ScanOrder::kDiagonal)];
  }
  if (width == 32 && height == 32) {
    return kScanOrder8x8SubBlock[static_cast<int>(ScanOrder::kDiagonal)];
  }
  assert(0);
  return nullptr;
}

}   // namespace xvc
