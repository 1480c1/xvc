/******************************************************************************
* Copyright (C) 2017, Divideon.
*
* Redistribution and use in source and binary form, with or without
* modifications is permitted only under the terms and conditions set forward
* in the xvc License Agreement. For commercial redistribution and use, you are
* required to send a signed copy of the xvc License Agreement to Divideon.
*
* Redistribution and use in source and binary form is permitted free of charge
* for non-commercial purposes. See definition of non-commercial in the xvc
* License Agreement.
*
* All redistribution of source code must retain this copyright notice
* unmodified.
*
* The xvc License Agreement is available at https://xvc.io/license/.
******************************************************************************/

#include "xvc_common_lib/transform.h"

#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdlib>
#include <cstring>

#include "xvc_common_lib/intra_prediction.h"
#include "xvc_common_lib/restrictions.h"
#include "xvc_common_lib/utils.h"

#if _MSC_VER
// Disable warning 4244 in Visual Studio in order to be able to do implicit
// type conversions (without static_cast).
#pragma warning(disable:4244)
#endif

namespace xvc {

static const int16_t kInvTransform2[2][2] = {
  { 256, 256 },
  { 256, -256 },
};

static const int16_t kInvTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kInvTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kInvTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kInvTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const int16_t kInvTransform64[64][64] = {
  { 256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256 },   // NOLINT
  { 362,361,359,357,353,349,344,338,331,323,315,306,296,285,274,262,250,236,223,208,194,178,163,147,130,114,97,79,62,44,27,9,-9,-27,-44,-62,-79,-97,-114,-130,-147,-163,-178,-194,-208,-223,-236,-250,-262,-274,-285,-296,-306,-315,-323,-331,-338,-344,-349,-353,-357,-359,-361,-362 },   // NOLINT
  { 362,358,351,341,327,311,291,268,243,216,186,155,122,88,53,18,-18,-53,-88,-122,-155,-186,-216,-243,-268,-291,-311,-327,-341,-351,-358,-362,-362,-358,-351,-341,-327,-311,-291,-268,-243,-216,-186,-155,-122,-88,-53,-18,18,53,88,122,155,186,216,243,268,291,311,327,341,351,358,362 },   // NOLINT
  { 361,353,338,315,285,250,208,163,114,62,9,-44,-97,-147,-194,-236,-274,-306,-331,-349,-359,-362,-357,-344,-323,-296,-262,-223,-178,-130,-79,-27,27,79,130,178,223,262,296,323,344,357,362,359,349,331,306,274,236,194,147,97,44,-9,-62,-114,-163,-208,-250,-285,-315,-338,-353,-361 },   // NOLINT
  { 360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360,360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360 },   // NOLINT
  { 359,338,296,236,163,79,-9,-97,-178,-250,-306,-344,-361,-357,-331,-285,-223,-147,-62,27,114,194,262,315,349,362,353,323,274,208,130,44,-44,-130,-208,-274,-323,-353,-362,-349,-315,-262,-194,-114,-27,62,147,223,285,331,357,361,344,306,250,178,97,9,-79,-163,-236,-296,-338,-359 },   // NOLINT
  { 358,327,268,186,88,-18,-122,-216,-291,-341,-362,-351,-311,-243,-155,-53,53,155,243,311,351,362,341,291,216,122,18,-88,-186,-268,-327,-358,-358,-327,-268,-186,-88,18,122,216,291,341,362,351,311,243,155,53,-53,-155,-243,-311,-351,-362,-341,-291,-216,-122,-18,88,186,268,327,358 },   // NOLINT
  { 357,315,236,130,9,-114,-223,-306,-353,-359,-323,-250,-147,-27,97,208,296,349,361,331,262,163,44,-79,-194,-285,-344,-362,-338,-274,-178,-62,62,178,274,338,362,344,285,194,79,-44,-163,-262,-331,-361,-349,-296,-208,-97,27,147,250,323,359,353,306,223,114,-9,-130,-236,-315,-357 },   // NOLINT
  { 355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355 },   // NOLINT
  { 353,285,163,9,-147,-274,-349,-357,-296,-178,-27,130,262,344,359,306,194,44,-114,-250,-338,-361,-315,-208,-62,97,236,331,362,323,223,79,-79,-223,-323,-362,-331,-236,-97,62,208,315,361,338,250,114,-44,-194,-306,-359,-344,-262,-130,27,178,296,357,349,274,147,-9,-163,-285,-353 },   // NOLINT
  { 351,268,122,-53,-216,-327,-362,-311,-186,-18,155,291,358,341,243,88,-88,-243,-341,-358,-291,-155,18,186,311,362,327,216,53,-122,-268,-351,-351,-268,-122,53,216,327,362,311,186,18,-155,-291,-358,-341,-243,-88,88,243,341,358,291,155,-18,-186,-311,-362,-327,-216,-53,122,268,351 },   // NOLINT
  { 349,250,79,-114,-274,-357,-338,-223,-44,147,296,361,323,194,9,-178,-315,-362,-306,-163,27,208,331,359,285,130,-62,-236,-344,-353,-262,-97,97,262,353,344,236,62,-130,-285,-359,-331,-208,-27,163,306,362,315,178,-9,-194,-323,-361,-296,-147,44,223,338,357,274,114,-79,-250,-349 },   // NOLINT
  { 346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346,346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346 },   // NOLINT
  { 344,208,-9,-223,-349,-338,-194,27,236,353,331,178,-44,-250,-357,-323,-163,62,262,359,315,147,-79,-274,-361,-306,-130,97,285,362,296,114,-114,-296,-362,-285,-97,130,306,361,274,79,-147,-315,-359,-262,-62,163,323,357,250,44,-178,-331,-353,-236,-27,194,338,349,223,9,-208,-344 },   // NOLINT
  { 341,186,-53,-268,-362,-291,-88,155,327,351,216,-18,-243,-358,-311,-122,122,311,358,243,18,-216,-351,-327,-155,88,291,362,268,53,-186,-341,-341,-186,53,268,362,291,88,-155,-327,-351,-216,18,243,358,311,122,-122,-311,-358,-243,-18,216,351,327,155,-88,-291,-362,-268,-53,186,341 },   // NOLINT
  { 338,163,-97,-306,-357,-223,27,262,362,274,44,-208,-353,-315,-114,147,331,344,178,-79,-296,-359,-236,9,250,361,285,62,-194,-349,-323,-130,130,323,349,194,-62,-285,-361,-250,-9,236,359,296,79,-178,-344,-331,-147,114,315,353,208,-44,-274,-362,-262,-27,223,357,306,97,-163,-338 },   // NOLINT
  { 334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334 },   // NOLINT
  { 331,114,-178,-353,-296,-44,236,362,250,-27,-285,-357,-194,97,323,338,130,-163,-349,-306,-62,223,361,262,-9,-274,-359,-208,79,315,344,147,-147,-344,-315,-79,208,359,274,9,-262,-361,-223,62,306,349,163,-130,-338,-323,-97,194,357,285,27,-250,-362,-236,44,296,353,178,-114,-331 },   // NOLINT
  { 327,88,-216,-362,-243,53,311,341,122,-186,-358,-268,18,291,351,155,-155,-351,-291,-18,268,358,186,-122,-341,-311,-53,243,362,216,-88,-327,-327,-88,216,362,243,-53,-311,-341,-122,186,358,268,-18,-291,-351,-155,155,351,291,18,-268,-358,-186,122,341,311,53,-243,-362,-216,88,327 },   // NOLINT
  { 323,62,-250,-359,-178,147,353,274,-27,-306,-338,-97,223,362,208,-114,-344,-296,-9,285,349,130,-194,-361,-236,79,331,315,44,-262,-357,-163,163,357,262,-44,-315,-331,-79,236,361,194,-130,-349,-285,9,296,344,114,-208,-362,-223,97,338,306,27,-274,-353,-147,178,359,250,-62,-323 },   // NOLINT
  { 319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319,319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319 },   // NOLINT
  { 315,9,-306,-323,-27,296,331,44,-285,-338,-62,274,344,79,-262,-349,-97,250,353,114,-236,-357,-130,223,359,147,-208,-361,-163,194,362,178,-178,-362,-194,163,361,208,-147,-359,-223,130,357,236,-114,-353,-250,97,349,262,-79,-344,-274,62,338,285,-44,-331,-296,27,323,306,-9,-315 },   // NOLINT
  { 311,-18,-327,-291,53,341,268,-88,-351,-243,122,358,216,-155,-362,-186,186,362,155,-216,-358,-122,243,351,88,-268,-341,-53,291,327,18,-311,-311,18,327,291,-53,-341,-268,88,351,243,-122,-358,-216,155,362,186,-186,-362,-155,216,358,122,-243,-351,-88,268,341,53,-291,-327,-18,311 },   // NOLINT
  { 306,-44,-344,-250,130,361,178,-208,-357,-97,274,331,9,-323,-285,79,353,223,-163,-362,-147,236,349,62,-296,-315,27,338,262,-114,-359,-194,194,359,114,-262,-338,-27,315,296,-62,-349,-236,147,362,163,-223,-353,-79,285,323,-9,-331,-274,97,357,208,-178,-361,-130,250,344,44,-306 },   // NOLINT
  { 301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301 },   // NOLINT
  { 296,-97,-361,-147,262,323,-44,-353,-194,223,344,9,-338,-236,178,357,62,-315,-274,130,362,114,-285,-306,79,359,163,-250,-331,27,349,208,-208,-349,-27,331,250,-163,-359,-79,306,285,-114,-362,-130,274,315,-62,-357,-178,236,338,-9,-344,-223,194,353,44,-323,-262,147,361,97,-296 },   // NOLINT
  { 291,-122,-362,-88,311,268,-155,-358,-53,327,243,-186,-351,-18,341,216,-216,-341,18,351,186,-243,-327,53,358,155,-268,-311,88,362,122,-291,-291,122,362,88,-311,-268,155,358,53,-327,-243,186,351,18,-341,-216,216,341,-18,-351,-186,243,327,-53,-358,-155,268,311,-88,-362,-122,291 },   // NOLINT
  { 285,-147,-357,-27,344,194,-250,-315,97,362,79,-323,-236,208,338,-44,-359,-130,296,274,-163,-353,-9,349,178,-262,-306,114,361,62,-331,-223,223,331,-62,-361,-114,306,262,-178,-349,9,353,163,-274,-296,130,359,44,-338,-208,236,323,-79,-362,-97,315,250,-194,-344,27,357,147,-285 },   // NOLINT
  { 280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280,280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280 },   // NOLINT
  { 274,-194,-331,97,359,9,-357,-114,323,208,-262,-285,178,338,-79,-361,-27,353,130,-315,-223,250,296,-163,-344,62,362,44,-349,-147,306,236,-236,-306,147,349,-44,-362,-62,344,163,-296,-250,223,315,-130,-353,27,361,79,-338,-178,285,262,-208,-323,114,357,-9,-359,-97,331,194,-274 },   // NOLINT
  { 268,-216,-311,155,341,-88,-358,18,362,53,-351,-122,327,186,-291,-243,243,291,-186,-327,122,351,-53,-362,-18,358,88,-341,-155,311,216,-268,-268,216,311,-155,-341,88,358,-18,-362,-53,351,122,-327,-186,291,243,-243,-291,186,327,-122,-351,53,362,18,-358,-88,341,155,-311,-216,268 },   // NOLINT
  { 262,-236,-285,208,306,-178,-323,147,338,-114,-349,79,357,-44,-361,9,362,27,-359,-62,353,97,-344,-130,331,163,-315,-194,296,223,-274,-250,250,274,-223,-296,194,315,-163,-331,130,344,-97,-353,62,359,-27,-362,-9,361,44,-357,-79,349,114,-338,-147,323,178,-306,-208,285,236,-262 },   // NOLINT
  { 256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256 },   // NOLINT
  { 250,-274,-223,296,194,-315,-163,331,130,-344,-97,353,62,-359,-27,362,-9,-361,44,357,-79,-349,114,338,-147,-323,178,306,-208,-285,236,262,-262,-236,285,208,-306,-178,323,147,-338,-114,349,79,-357,-44,361,9,-362,27,359,-62,-353,97,344,-130,-331,163,315,-194,-296,223,274,-250 },   // NOLINT
  { 243,-291,-186,327,122,-351,-53,362,-18,-358,88,341,-155,-311,216,268,-268,-216,311,155,-341,-88,358,18,-362,53,351,-122,-327,186,291,-243,-243,291,186,-327,-122,351,53,-362,18,358,-88,-341,155,311,-216,-268,268,216,-311,-155,341,88,-358,-18,362,-53,-351,122,327,-186,-291,243 },   // NOLINT
  { 236,-306,-147,349,44,-362,62,344,-163,-296,250,223,-315,-130,353,27,-361,79,338,-178,-285,262,208,-323,-114,357,9,-359,97,331,-194,-274,274,194,-331,-97,359,-9,-357,114,323,-208,-262,285,178,-338,-79,361,-27,-353,130,315,-223,-250,296,163,-344,-62,362,-44,-349,147,306,-236 },   // NOLINT
  { 230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230,230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230 },   // NOLINT
  { 223,-331,-62,361,-114,-306,262,178,-349,-9,353,-163,-274,296,130,-359,44,338,-208,-236,323,79,-362,97,315,-250,-194,344,27,-357,147,285,-285,-147,357,-27,-344,194,250,-315,-97,362,-79,-323,236,208,-338,-44,359,-130,-296,274,163,-353,9,349,-178,-262,306,114,-361,62,331,-223 },   // NOLINT
  { 216,-341,-18,351,-186,-243,327,53,-358,155,268,-311,-88,362,-122,-291,291,122,-362,88,311,-268,-155,358,-53,-327,243,186,-351,18,341,-216,-216,341,18,-351,186,243,-327,-53,358,-155,-268,311,88,-362,122,291,-291,-122,362,-88,-311,268,155,-358,53,327,-243,-186,351,-18,-341,216 },   // NOLINT
  { 208,-349,27,331,-250,-163,359,-79,-306,285,114,-362,130,274,-315,-62,357,-178,-236,338,9,-344,223,194,-353,44,323,-262,-147,361,-97,-296,296,97,-361,147,262,-323,-44,353,-194,-223,344,-9,-338,236,178,-357,62,315,-274,-130,362,-114,-285,306,79,-359,163,250,-331,-27,349,-208 },   // NOLINT
  { 201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201 },   // NOLINT
  { 194,-359,114,262,-338,27,315,-296,-62,349,-236,-147,362,-163,-223,353,-79,-285,323,9,-331,274,97,-357,208,178,-361,130,250,-344,44,306,-306,-44,344,-250,-130,361,-178,-208,357,-97,-274,331,-9,-323,285,79,-353,223,163,-362,147,236,-349,62,296,-315,-27,338,-262,-114,359,-194 },   // NOLINT
  { 186,-362,155,216,-358,122,243,-351,88,268,-341,53,291,-327,18,311,-311,-18,327,-291,-53,341,-268,-88,351,-243,-122,358,-216,-155,362,-186,-186,362,-155,-216,358,-122,-243,351,-88,-268,341,-53,-291,327,-18,-311,311,18,-327,291,53,-341,268,88,-351,243,122,-358,216,155,-362,186 },   // NOLINT
  { 178,-362,194,163,-361,208,147,-359,223,130,-357,236,114,-353,250,97,-349,262,79,-344,274,62,-338,285,44,-331,296,27,-323,306,9,-315,315,-9,-306,323,-27,-296,331,-44,-285,338,-62,-274,344,-79,-262,349,-97,-250,353,-114,-236,357,-130,-223,359,-147,-208,361,-163,-194,362,-178 },   // NOLINT
  { 171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171,171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171 },   // NOLINT
  { 163,-357,262,44,-315,331,-79,-236,361,-194,-130,349,-285,-9,296,-344,114,208,-362,223,97,-338,306,-27,-274,353,-147,-178,359,-250,-62,323,-323,62,250,-359,178,147,-353,274,27,-306,338,-97,-223,362,-208,-114,344,-296,9,285,-349,130,194,-361,236,79,-331,315,-44,-262,357,-163 },   // NOLINT
  { 155,-351,291,-18,-268,358,-186,-122,341,-311,53,243,-362,216,88,-327,327,-88,-216,362,-243,-53,311,-341,122,186,-358,268,18,-291,351,-155,-155,351,-291,18,268,-358,186,122,-341,311,-53,-243,362,-216,-88,327,-327,88,216,-362,243,53,-311,341,-122,-186,358,-268,-18,291,-351,155 },   // NOLINT
  { 147,-344,315,-79,-208,359,-274,9,262,-361,223,62,-306,349,-163,-130,338,-323,97,194,-357,285,-27,-250,362,-236,-44,296,-353,178,114,-331,331,-114,-178,353,-296,44,236,-362,250,27,-285,357,-194,-97,323,-338,130,163,-349,306,-62,-223,361,-262,-9,274,-359,208,79,-315,344,-147 },   // NOLINT
  { 139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139 },   // NOLINT
  { 130,-323,349,-194,-62,285,-361,250,-9,-236,359,-296,79,178,-344,331,-147,-114,315,-353,208,44,-274,362,-262,27,223,-357,306,-97,-163,338,-338,163,97,-306,357,-223,-27,262,-362,274,-44,-208,353,-315,114,147,-331,344,-178,-79,296,-359,236,9,-250,361,-285,62,194,-349,323,-130 },   // NOLINT
  { 122,-311,358,-243,18,216,-351,327,-155,-88,291,-362,268,-53,-186,341,-341,186,53,-268,362,-291,88,155,-327,351,-216,-18,243,-358,311,-122,-122,311,-358,243,-18,-216,351,-327,155,88,-291,362,-268,53,186,-341,341,-186,-53,268,-362,291,-88,-155,327,-351,216,18,-243,358,-311,122 },   // NOLINT
  { 114,-296,362,-285,97,130,-306,361,-274,79,147,-315,359,-262,62,163,-323,357,-250,44,178,-331,353,-236,27,194,-338,349,-223,9,208,-344,344,-208,-9,223,-349,338,-194,-27,236,-353,331,-178,-44,250,-357,323,-163,-62,262,-359,315,-147,-79,274,-361,306,-130,-97,285,-362,296,-114 },   // NOLINT
  { 105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105,105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105 },   // NOLINT
  { 97,-262,353,-344,236,-62,-130,285,-359,331,-208,27,163,-306,362,-315,178,9,-194,323,-361,296,-147,-44,223,-338,357,-274,114,79,-250,349,-349,250,-79,-114,274,-357,338,-223,44,147,-296,361,-323,194,-9,-178,315,-362,306,-163,-27,208,-331,359,-285,130,62,-236,344,-353,262,-97 },   // NOLINT
  { 88,-243,341,-358,291,-155,-18,186,-311,362,-327,216,-53,-122,268,-351,351,-268,122,53,-216,327,-362,311,-186,18,155,-291,358,-341,243,-88,-88,243,-341,358,-291,155,18,-186,311,-362,327,-216,53,122,-268,351,-351,268,-122,-53,216,-327,362,-311,186,-18,-155,291,-358,341,-243,88 },   // NOLINT
  { 79,-223,323,-362,331,-236,97,62,-208,315,-361,338,-250,114,44,-194,306,-359,344,-262,130,27,-178,296,-357,349,-274,147,9,-163,285,-353,353,-285,163,-9,-147,274,-349,357,-296,178,-27,-130,262,-344,359,-306,194,-44,-114,250,-338,361,-315,208,-62,-97,236,-331,362,-323,223,-79 },   // NOLINT
  { 71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71 },   // NOLINT
  { 62,-178,274,-338,362,-344,285,-194,79,44,-163,262,-331,361,-349,296,-208,97,27,-147,250,-323,359,-353,306,-223,114,9,-130,236,-315,357,-357,315,-236,130,-9,-114,223,-306,353,-359,323,-250,147,-27,-97,208,-296,349,-361,331,-262,163,-44,-79,194,-285,344,-362,338,-274,178,-62 },   // NOLINT
  { 53,-155,243,-311,351,-362,341,-291,216,-122,18,88,-186,268,-327,358,-358,327,-268,186,-88,-18,122,-216,291,-341,362,-351,311,-243,155,-53,-53,155,-243,311,-351,362,-341,291,-216,122,-18,-88,186,-268,327,-358,358,-327,268,-186,88,18,-122,216,-291,341,-362,351,-311,243,-155,53 },   // NOLINT
  { 44,-130,208,-274,323,-353,362,-349,315,-262,194,-114,27,62,-147,223,-285,331,-357,361,-344,306,-250,178,-97,9,79,-163,236,-296,338,-359,359,-338,296,-236,163,-79,-9,97,-178,250,-306,344,-361,357,-331,285,-223,147,-62,-27,114,-194,262,-315,349,-362,353,-323,274,-208,130,-44 },   // NOLINT
  { 35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35,35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35 },   // NOLINT
  { 27,-79,130,-178,223,-262,296,-323,344,-357,362,-359,349,-331,306,-274,236,-194,147,-97,44,9,-62,114,-163,208,-250,285,-315,338,-353,361,-361,353,-338,315,-285,250,-208,163,-114,62,-9,-44,97,-147,194,-236,274,-306,331,-349,359,-362,357,-344,323,-296,262,-223,178,-130,79,-27 },   // NOLINT
  { 18,-53,88,-122,155,-186,216,-243,268,-291,311,-327,341,-351,358,-362,362,-358,351,-341,327,-311,291,-268,243,-216,186,-155,122,-88,53,-18,-18,53,-88,122,-155,186,-216,243,-268,291,-311,327,-341,351,-358,362,-362,358,-351,341,-327,311,-291,268,-243,216,-186,155,-122,88,-53,18 },   // NOLINT
  { 9,-27,44,-62,79,-97,114,-130,147,-163,178,-194,208,-223,236,-250,262,-274,285,-296,306,-315,323,-331,338,-344,349,-353,357,-359,361,-362,362,-361,359,-357,353,-349,344,-338,331,-323,315,-306,296,-285,274,-262,250,-236,223,-208,194,-178,163,-147,130,-114,97,-79,62,-44,27,-9 },   // NOLINT
};

static const int16_t kFwdTransform2[2][2] = {
  { 256, 256 },
  { 256, -256 },
};

static const int16_t kFwdTransform4[4][4] = {
  { 64, 64, 64, 64 },
  { 83, 36, -36, -83 },
  { 64, -64, -64, 64 },
  { 36, -83, 83, -36 }
};

static const int16_t kFwdTransform8[8][8] = {
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18, -18, -50, -75, -89 },
  { 83, 36, -36, -83, -83, -36, 36, 83 },
  { 75, -18, -89, -50, 50, 89, 18, -75 },
  { 64, -64, -64, 64, 64, -64, -64, 64 },
  { 50, -89, 18, 75, -75, -18, 89, -50 },
  { 36, -83, 83, -36, -36, 83, -83, 36 },
  { 18, -50, 75, -89, 89, -75, 50, -18 }
};

static const int16_t kFwdTransform16[16][16] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9 }
};

static const int16_t kFwdTransform32[32][32] = {
  { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
  { 90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4,
  -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90 },
  { 90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
  -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90 },
  { 90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
  13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90 },
  { 89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
  89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89 },
  { 88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
  -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88 },
  { 87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
  -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87 },
  { 85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
  31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85 },
  { 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
  83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83 },
  { 82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
  -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82 },
  { 80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
  -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80 },
  { 78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
  46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78 },
  { 75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
  75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75 },
  { 73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
  -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73 },
  { 70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
  -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70 },
  { 67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
  61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67 },
  { 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
  64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64 },
  { 61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
  -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61 },
  { 57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
  -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57 },
  { 54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
  73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54 },
  { 50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
  50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50 },
  { 46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
  -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46 },
  { 43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
  -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43 },
  { 38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
  82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38 },
  { 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
  36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36 },
  { 31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
  -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31 },
  { 25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
  -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25 },
  { 22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
  88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22 },
  { 18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
  18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18 },
  { 13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
  -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13 },
  { 9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
  -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9 },
  { 4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
  90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4 }
};

static const int16_t kFwdTransform64[64][64] = {
  { 256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256 },   // NOLINT
  { 362,361,359,357,353,349,344,338,331,323,315,306,296,285,274,262,250,236,223,208,194,178,163,147,130,114,97,79,62,44,27,9,-9,-27,-44,-62,-79,-97,-114,-130,-147,-163,-178,-194,-208,-223,-236,-250,-262,-274,-285,-296,-306,-315,-323,-331,-338,-344,-349,-353,-357,-359,-361,-362 },   // NOLINT
  { 362,358,351,341,327,311,291,268,243,216,186,155,122,88,53,18,-18,-53,-88,-122,-155,-186,-216,-243,-268,-291,-311,-327,-341,-351,-358,-362,-362,-358,-351,-341,-327,-311,-291,-268,-243,-216,-186,-155,-122,-88,-53,-18,18,53,88,122,155,186,216,243,268,291,311,327,341,351,358,362 },   // NOLINT
  { 361,353,338,315,285,250,208,163,114,62,9,-44,-97,-147,-194,-236,-274,-306,-331,-349,-359,-362,-357,-344,-323,-296,-262,-223,-178,-130,-79,-27,27,79,130,178,223,262,296,323,344,357,362,359,349,331,306,274,236,194,147,97,44,-9,-62,-114,-163,-208,-250,-285,-315,-338,-353,-361 },   // NOLINT
  { 360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360,360,346,319,280,230,171,105,35,-35,-105,-171,-230,-280,-319,-346,-360,-360,-346,-319,-280,-230,-171,-105,-35,35,105,171,230,280,319,346,360 },   // NOLINT
  { 359,338,296,236,163,79,-9,-97,-178,-250,-306,-344,-361,-357,-331,-285,-223,-147,-62,27,114,194,262,315,349,362,353,323,274,208,130,44,-44,-130,-208,-274,-323,-353,-362,-349,-315,-262,-194,-114,-27,62,147,223,285,331,357,361,344,306,250,178,97,9,-79,-163,-236,-296,-338,-359 },   // NOLINT
  { 358,327,268,186,88,-18,-122,-216,-291,-341,-362,-351,-311,-243,-155,-53,53,155,243,311,351,362,341,291,216,122,18,-88,-186,-268,-327,-358,-358,-327,-268,-186,-88,18,122,216,291,341,362,351,311,243,155,53,-53,-155,-243,-311,-351,-362,-341,-291,-216,-122,-18,88,186,268,327,358 },   // NOLINT
  { 357,315,236,130,9,-114,-223,-306,-353,-359,-323,-250,-147,-27,97,208,296,349,361,331,262,163,44,-79,-194,-285,-344,-362,-338,-274,-178,-62,62,178,274,338,362,344,285,194,79,-44,-163,-262,-331,-361,-349,-296,-208,-97,27,147,250,323,359,353,306,223,114,-9,-130,-236,-315,-357 },   // NOLINT
  { 355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355,355,301,201,71,-71,-201,-301,-355,-355,-301,-201,-71,71,201,301,355 },   // NOLINT
  { 353,285,163,9,-147,-274,-349,-357,-296,-178,-27,130,262,344,359,306,194,44,-114,-250,-338,-361,-315,-208,-62,97,236,331,362,323,223,79,-79,-223,-323,-362,-331,-236,-97,62,208,315,361,338,250,114,-44,-194,-306,-359,-344,-262,-130,27,178,296,357,349,274,147,-9,-163,-285,-353 },   // NOLINT
  { 351,268,122,-53,-216,-327,-362,-311,-186,-18,155,291,358,341,243,88,-88,-243,-341,-358,-291,-155,18,186,311,362,327,216,53,-122,-268,-351,-351,-268,-122,53,216,327,362,311,186,18,-155,-291,-358,-341,-243,-88,88,243,341,358,291,155,-18,-186,-311,-362,-327,-216,-53,122,268,351 },   // NOLINT
  { 349,250,79,-114,-274,-357,-338,-223,-44,147,296,361,323,194,9,-178,-315,-362,-306,-163,27,208,331,359,285,130,-62,-236,-344,-353,-262,-97,97,262,353,344,236,62,-130,-285,-359,-331,-208,-27,163,306,362,315,178,-9,-194,-323,-361,-296,-147,44,223,338,357,274,114,-79,-250,-349 },   // NOLINT
  { 346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346,346,230,35,-171,-319,-360,-280,-105,105,280,360,319,171,-35,-230,-346,-346,-230,-35,171,319,360,280,105,-105,-280,-360,-319,-171,35,230,346 },   // NOLINT
  { 344,208,-9,-223,-349,-338,-194,27,236,353,331,178,-44,-250,-357,-323,-163,62,262,359,315,147,-79,-274,-361,-306,-130,97,285,362,296,114,-114,-296,-362,-285,-97,130,306,361,274,79,-147,-315,-359,-262,-62,163,323,357,250,44,-178,-331,-353,-236,-27,194,338,349,223,9,-208,-344 },   // NOLINT
  { 341,186,-53,-268,-362,-291,-88,155,327,351,216,-18,-243,-358,-311,-122,122,311,358,243,18,-216,-351,-327,-155,88,291,362,268,53,-186,-341,-341,-186,53,268,362,291,88,-155,-327,-351,-216,18,243,358,311,122,-122,-311,-358,-243,-18,216,351,327,155,-88,-291,-362,-268,-53,186,341 },   // NOLINT
  { 338,163,-97,-306,-357,-223,27,262,362,274,44,-208,-353,-315,-114,147,331,344,178,-79,-296,-359,-236,9,250,361,285,62,-194,-349,-323,-130,130,323,349,194,-62,-285,-361,-250,-9,236,359,296,79,-178,-344,-331,-147,114,315,353,208,-44,-274,-362,-262,-27,223,357,306,97,-163,-338 },   // NOLINT
  { 334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334,334,139,-139,-334,-334,-139,139,334 },   // NOLINT
  { 331,114,-178,-353,-296,-44,236,362,250,-27,-285,-357,-194,97,323,338,130,-163,-349,-306,-62,223,361,262,-9,-274,-359,-208,79,315,344,147,-147,-344,-315,-79,208,359,274,9,-262,-361,-223,62,306,349,163,-130,-338,-323,-97,194,357,285,27,-250,-362,-236,44,296,353,178,-114,-331 },   // NOLINT
  { 327,88,-216,-362,-243,53,311,341,122,-186,-358,-268,18,291,351,155,-155,-351,-291,-18,268,358,186,-122,-341,-311,-53,243,362,216,-88,-327,-327,-88,216,362,243,-53,-311,-341,-122,186,358,268,-18,-291,-351,-155,155,351,291,18,-268,-358,-186,122,341,311,53,-243,-362,-216,88,327 },   // NOLINT
  { 323,62,-250,-359,-178,147,353,274,-27,-306,-338,-97,223,362,208,-114,-344,-296,-9,285,349,130,-194,-361,-236,79,331,315,44,-262,-357,-163,163,357,262,-44,-315,-331,-79,236,361,194,-130,-349,-285,9,296,344,114,-208,-362,-223,97,338,306,27,-274,-353,-147,178,359,250,-62,-323 },   // NOLINT
  { 319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319,319,35,-280,-346,-105,230,360,171,-171,-360,-230,105,346,280,-35,-319,-319,-35,280,346,105,-230,-360,-171,171,360,230,-105,-346,-280,35,319 },   // NOLINT
  { 315,9,-306,-323,-27,296,331,44,-285,-338,-62,274,344,79,-262,-349,-97,250,353,114,-236,-357,-130,223,359,147,-208,-361,-163,194,362,178,-178,-362,-194,163,361,208,-147,-359,-223,130,357,236,-114,-353,-250,97,349,262,-79,-344,-274,62,338,285,-44,-331,-296,27,323,306,-9,-315 },   // NOLINT
  { 311,-18,-327,-291,53,341,268,-88,-351,-243,122,358,216,-155,-362,-186,186,362,155,-216,-358,-122,243,351,88,-268,-341,-53,291,327,18,-311,-311,18,327,291,-53,-341,-268,88,351,243,-122,-358,-216,155,362,186,-186,-362,-155,216,358,122,-243,-351,-88,268,341,53,-291,-327,-18,311 },   // NOLINT
  { 306,-44,-344,-250,130,361,178,-208,-357,-97,274,331,9,-323,-285,79,353,223,-163,-362,-147,236,349,62,-296,-315,27,338,262,-114,-359,-194,194,359,114,-262,-338,-27,315,296,-62,-349,-236,147,362,163,-223,-353,-79,285,323,-9,-331,-274,97,357,208,-178,-361,-130,250,344,44,-306 },   // NOLINT
  { 301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301,301,-71,-355,-201,201,355,71,-301,-301,71,355,201,-201,-355,-71,301 },   // NOLINT
  { 296,-97,-361,-147,262,323,-44,-353,-194,223,344,9,-338,-236,178,357,62,-315,-274,130,362,114,-285,-306,79,359,163,-250,-331,27,349,208,-208,-349,-27,331,250,-163,-359,-79,306,285,-114,-362,-130,274,315,-62,-357,-178,236,338,-9,-344,-223,194,353,44,-323,-262,147,361,97,-296 },   // NOLINT
  { 291,-122,-362,-88,311,268,-155,-358,-53,327,243,-186,-351,-18,341,216,-216,-341,18,351,186,-243,-327,53,358,155,-268,-311,88,362,122,-291,-291,122,362,88,-311,-268,155,358,53,-327,-243,186,351,18,-341,-216,216,341,-18,-351,-186,243,327,-53,-358,-155,268,311,-88,-362,-122,291 },   // NOLINT
  { 285,-147,-357,-27,344,194,-250,-315,97,362,79,-323,-236,208,338,-44,-359,-130,296,274,-163,-353,-9,349,178,-262,-306,114,361,62,-331,-223,223,331,-62,-361,-114,306,262,-178,-349,9,353,163,-274,-296,130,359,44,-338,-208,236,323,-79,-362,-97,315,250,-194,-344,27,357,147,-285 },   // NOLINT
  { 280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280,280,-171,-346,35,360,105,-319,-230,230,319,-105,-360,-35,346,171,-280,-280,171,346,-35,-360,-105,319,230,-230,-319,105,360,35,-346,-171,280 },   // NOLINT
  { 274,-194,-331,97,359,9,-357,-114,323,208,-262,-285,178,338,-79,-361,-27,353,130,-315,-223,250,296,-163,-344,62,362,44,-349,-147,306,236,-236,-306,147,349,-44,-362,-62,344,163,-296,-250,223,315,-130,-353,27,361,79,-338,-178,285,262,-208,-323,114,357,-9,-359,-97,331,194,-274 },   // NOLINT
  { 268,-216,-311,155,341,-88,-358,18,362,53,-351,-122,327,186,-291,-243,243,291,-186,-327,122,351,-53,-362,-18,358,88,-341,-155,311,216,-268,-268,216,311,-155,-341,88,358,-18,-362,-53,351,122,-327,-186,291,243,-243,-291,186,327,-122,-351,53,362,18,-358,-88,341,155,-311,-216,268 },   // NOLINT
  { 262,-236,-285,208,306,-178,-323,147,338,-114,-349,79,357,-44,-361,9,362,27,-359,-62,353,97,-344,-130,331,163,-315,-194,296,223,-274,-250,250,274,-223,-296,194,315,-163,-331,130,344,-97,-353,62,359,-27,-362,-9,361,44,-357,-79,349,114,-338,-147,323,178,-306,-208,285,236,-262 },   // NOLINT
  { 256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256,256,-256,-256,256 },   // NOLINT
  { 250,-274,-223,296,194,-315,-163,331,130,-344,-97,353,62,-359,-27,362,-9,-361,44,357,-79,-349,114,338,-147,-323,178,306,-208,-285,236,262,-262,-236,285,208,-306,-178,323,147,-338,-114,349,79,-357,-44,361,9,-362,27,359,-62,-353,97,344,-130,-331,163,315,-194,-296,223,274,-250 },   // NOLINT
  { 243,-291,-186,327,122,-351,-53,362,-18,-358,88,341,-155,-311,216,268,-268,-216,311,155,-341,-88,358,18,-362,53,351,-122,-327,186,291,-243,-243,291,186,-327,-122,351,53,-362,18,358,-88,-341,155,311,-216,-268,268,216,-311,-155,341,88,-358,-18,362,-53,-351,122,327,-186,-291,243 },   // NOLINT
  { 236,-306,-147,349,44,-362,62,344,-163,-296,250,223,-315,-130,353,27,-361,79,338,-178,-285,262,208,-323,-114,357,9,-359,97,331,-194,-274,274,194,-331,-97,359,-9,-357,114,323,-208,-262,285,178,-338,-79,361,-27,-353,130,315,-223,-250,296,163,-344,-62,362,-44,-349,147,306,-236 },   // NOLINT
  { 230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230,230,-319,-105,360,-35,-346,171,280,-280,-171,346,35,-360,105,319,-230,-230,319,105,-360,35,346,-171,-280,280,171,-346,-35,360,-105,-319,230 },   // NOLINT
  { 223,-331,-62,361,-114,-306,262,178,-349,-9,353,-163,-274,296,130,-359,44,338,-208,-236,323,79,-362,97,315,-250,-194,344,27,-357,147,285,-285,-147,357,-27,-344,194,250,-315,-97,362,-79,-323,236,208,-338,-44,359,-130,-296,274,163,-353,9,349,-178,-262,306,114,-361,62,331,-223 },   // NOLINT
  { 216,-341,-18,351,-186,-243,327,53,-358,155,268,-311,-88,362,-122,-291,291,122,-362,88,311,-268,-155,358,-53,-327,243,186,-351,18,341,-216,-216,341,18,-351,186,243,-327,-53,358,-155,-268,311,88,-362,122,291,-291,-122,362,-88,-311,268,155,-358,53,327,-243,-186,351,-18,-341,216 },   // NOLINT
  { 208,-349,27,331,-250,-163,359,-79,-306,285,114,-362,130,274,-315,-62,357,-178,-236,338,9,-344,223,194,-353,44,323,-262,-147,361,-97,-296,296,97,-361,147,262,-323,-44,353,-194,-223,344,-9,-338,236,178,-357,62,315,-274,-130,362,-114,-285,306,79,-359,163,250,-331,-27,349,-208 },   // NOLINT
  { 201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201,201,-355,71,301,-301,-71,355,-201,-201,355,-71,-301,301,71,-355,201 },   // NOLINT
  { 194,-359,114,262,-338,27,315,-296,-62,349,-236,-147,362,-163,-223,353,-79,-285,323,9,-331,274,97,-357,208,178,-361,130,250,-344,44,306,-306,-44,344,-250,-130,361,-178,-208,357,-97,-274,331,-9,-323,285,79,-353,223,163,-362,147,236,-349,62,296,-315,-27,338,-262,-114,359,-194 },   // NOLINT
  { 186,-362,155,216,-358,122,243,-351,88,268,-341,53,291,-327,18,311,-311,-18,327,-291,-53,341,-268,-88,351,-243,-122,358,-216,-155,362,-186,-186,362,-155,-216,358,-122,-243,351,-88,-268,341,-53,-291,327,-18,-311,311,18,-327,291,53,-341,268,88,-351,243,122,-358,216,155,-362,186 },   // NOLINT
  { 178,-362,194,163,-361,208,147,-359,223,130,-357,236,114,-353,250,97,-349,262,79,-344,274,62,-338,285,44,-331,296,27,-323,306,9,-315,315,-9,-306,323,-27,-296,331,-44,-285,338,-62,-274,344,-79,-262,349,-97,-250,353,-114,-236,357,-130,-223,359,-147,-208,361,-163,-194,362,-178 },   // NOLINT
  { 171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171,171,-360,230,105,-346,280,35,-319,319,-35,-280,346,-105,-230,360,-171,-171,360,-230,-105,346,-280,-35,319,-319,35,280,-346,105,230,-360,171 },   // NOLINT
  { 163,-357,262,44,-315,331,-79,-236,361,-194,-130,349,-285,-9,296,-344,114,208,-362,223,97,-338,306,-27,-274,353,-147,-178,359,-250,-62,323,-323,62,250,-359,178,147,-353,274,27,-306,338,-97,-223,362,-208,-114,344,-296,9,285,-349,130,194,-361,236,79,-331,315,-44,-262,357,-163 },   // NOLINT
  { 155,-351,291,-18,-268,358,-186,-122,341,-311,53,243,-362,216,88,-327,327,-88,-216,362,-243,-53,311,-341,122,186,-358,268,18,-291,351,-155,-155,351,-291,18,268,-358,186,122,-341,311,-53,-243,362,-216,-88,327,-327,88,216,-362,243,53,-311,341,-122,-186,358,-268,-18,291,-351,155 },   // NOLINT
  { 147,-344,315,-79,-208,359,-274,9,262,-361,223,62,-306,349,-163,-130,338,-323,97,194,-357,285,-27,-250,362,-236,-44,296,-353,178,114,-331,331,-114,-178,353,-296,44,236,-362,250,27,-285,357,-194,-97,323,-338,130,163,-349,306,-62,-223,361,-262,-9,274,-359,208,79,-315,344,-147 },   // NOLINT
  { 139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139,139,-334,334,-139,-139,334,-334,139 },   // NOLINT
  { 130,-323,349,-194,-62,285,-361,250,-9,-236,359,-296,79,178,-344,331,-147,-114,315,-353,208,44,-274,362,-262,27,223,-357,306,-97,-163,338,-338,163,97,-306,357,-223,-27,262,-362,274,-44,-208,353,-315,114,147,-331,344,-178,-79,296,-359,236,9,-250,361,-285,62,194,-349,323,-130 },   // NOLINT
  { 122,-311,358,-243,18,216,-351,327,-155,-88,291,-362,268,-53,-186,341,-341,186,53,-268,362,-291,88,155,-327,351,-216,-18,243,-358,311,-122,-122,311,-358,243,-18,-216,351,-327,155,88,-291,362,-268,53,186,-341,341,-186,-53,268,-362,291,-88,-155,327,-351,216,18,-243,358,-311,122 },   // NOLINT
  { 114,-296,362,-285,97,130,-306,361,-274,79,147,-315,359,-262,62,163,-323,357,-250,44,178,-331,353,-236,27,194,-338,349,-223,9,208,-344,344,-208,-9,223,-349,338,-194,-27,236,-353,331,-178,-44,250,-357,323,-163,-62,262,-359,315,-147,-79,274,-361,306,-130,-97,285,-362,296,-114 },   // NOLINT
  { 105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105,105,-280,360,-319,171,35,-230,346,-346,230,-35,-171,319,-360,280,-105,-105,280,-360,319,-171,-35,230,-346,346,-230,35,171,-319,360,-280,105 },   // NOLINT
  { 97,-262,353,-344,236,-62,-130,285,-359,331,-208,27,163,-306,362,-315,178,9,-194,323,-361,296,-147,-44,223,-338,357,-274,114,79,-250,349,-349,250,-79,-114,274,-357,338,-223,44,147,-296,361,-323,194,-9,-178,315,-362,306,-163,-27,208,-331,359,-285,130,62,-236,344,-353,262,-97 },   // NOLINT
  { 88,-243,341,-358,291,-155,-18,186,-311,362,-327,216,-53,-122,268,-351,351,-268,122,53,-216,327,-362,311,-186,18,155,-291,358,-341,243,-88,-88,243,-341,358,-291,155,18,-186,311,-362,327,-216,53,122,-268,351,-351,268,-122,-53,216,-327,362,-311,186,-18,-155,291,-358,341,-243,88 },   // NOLINT
  { 79,-223,323,-362,331,-236,97,62,-208,315,-361,338,-250,114,44,-194,306,-359,344,-262,130,27,-178,296,-357,349,-274,147,9,-163,285,-353,353,-285,163,-9,-147,274,-349,357,-296,178,-27,-130,262,-344,359,-306,194,-44,-114,250,-338,361,-315,208,-62,-97,236,-331,362,-323,223,-79 },   // NOLINT
  { 71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71,71,-201,301,-355,355,-301,201,-71,-71,201,-301,355,-355,301,-201,71 },   // NOLINT
  { 62,-178,274,-338,362,-344,285,-194,79,44,-163,262,-331,361,-349,296,-208,97,27,-147,250,-323,359,-353,306,-223,114,9,-130,236,-315,357,-357,315,-236,130,-9,-114,223,-306,353,-359,323,-250,147,-27,-97,208,-296,349,-361,331,-262,163,-44,-79,194,-285,344,-362,338,-274,178,-62 },   // NOLINT
  { 53,-155,243,-311,351,-362,341,-291,216,-122,18,88,-186,268,-327,358,-358,327,-268,186,-88,-18,122,-216,291,-341,362,-351,311,-243,155,-53,-53,155,-243,311,-351,362,-341,291,-216,122,-18,-88,186,-268,327,-358,358,-327,268,-186,88,18,-122,216,-291,341,-362,351,-311,243,-155,53 },   // NOLINT
  { 44,-130,208,-274,323,-353,362,-349,315,-262,194,-114,27,62,-147,223,-285,331,-357,361,-344,306,-250,178,-97,9,79,-163,236,-296,338,-359,359,-338,296,-236,163,-79,-9,97,-178,250,-306,344,-361,357,-331,285,-223,147,-62,-27,114,-194,262,-315,349,-362,353,-323,274,-208,130,-44 },   // NOLINT
  { 35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35,35,-105,171,-230,280,-319,346,-360,360,-346,319,-280,230,-171,105,-35,-35,105,-171,230,-280,319,-346,360,-360,346,-319,280,-230,171,-105,35 },   // NOLINT
  { 27,-79,130,-178,223,-262,296,-323,344,-357,362,-359,349,-331,306,-274,236,-194,147,-97,44,9,-62,114,-163,208,-250,285,-315,338,-353,361,-361,353,-338,315,-285,250,-208,163,-114,62,-9,-44,97,-147,194,-236,274,-306,331,-349,359,-362,357,-344,323,-296,262,-223,178,-130,79,-27 },   // NOLINT
  { 18,-53,88,-122,155,-186,216,-243,268,-291,311,-327,341,-351,358,-362,362,-358,351,-341,327,-311,291,-268,243,-216,186,-155,122,-88,53,-18,-18,53,-88,122,-155,186,-216,243,-268,291,-311,327,-341,351,-358,362,-362,358,-351,341,-327,311,-291,268,-243,216,-186,155,-122,88,-53,18 },   // NOLINT
  { 9,-27,44,-62,79,-97,114,-130,147,-163,178,-194,208,-223,236,-250,262,-274,285,-296,306,-315,323,-331,338,-344,349,-353,357,-359,361,-362,362,-361,359,-357,353,-349,344,-338,331,-323,315,-306,296,-285,274,-262,250,-236,223,-208,194,-178,163,-147,130,-114,97,-79,62,-44,27,-9 },   // NOLINT
};

const std::array<uint8_t, 128> TransformHelper::kLastPosGroupIdx = { {
  0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9,
  9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13
} };

const std::array<uint8_t, 14> TransformHelper::kLastPosMinInGroup = { {
  0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96
} };

const std::array<std::array<uint8_t, 4>, 3> TransformHelper::kScanCoeff2x2 = { {
  { 0, 2, 1, 3 },
  { 0, 1, 2, 3 },
  { 0, 2, 1, 3 },
} };

const
std::array<std::array<uint8_t, 16>, 3> TransformHelper::kScanCoeff4x4 = { {
  { 0, 4, 1, 8, 5, 2, 12, 9, 6, 3, 13, 10, 7, 14, 11, 15 },
  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
  { 0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15 },
} };

void InverseTransform::Transform(int width, int height, bool is_luma_intra,
                                 const Coeff *coeff, ptrdiff_t coeff_stride,
                                 Residual *resi, ptrdiff_t resi_stride) {
  const int shift1 = 7 +
    (height >= 64 || height == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (height) {
    case 2:
      InvPartialTransform2(shift1, width, coeff, coeff_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 4:
      if (width == 4 && is_luma_intra) {
        InvPartialDST4(shift1, coeff, coeff_stride,
                       &coeff_temp_[0], kBufferStride_);
      } else {
        InvPartialTransform4(shift1, width, coeff, coeff_stride,
                             &coeff_temp_[0], kBufferStride_);
      }
      break;
    case 8:
      InvPartialTransform8(shift1, width, coeff, coeff_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 16:
      InvPartialTransform16(shift1, width, coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 32:
      InvPartialTransform32(shift1, width, coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 64:
      InvPartialTransform64(shift1, width,
                            constants::kZeroOutHighFreqLargeTransforms,
                            coeff, coeff_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    default:
      assert(0);
      break;
  }
  const int shift2 = 20 - bitdepth_ +
    (width >= 64 || width == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (width) {
    case 2:
      InvPartialTransform2(shift2, height, &coeff_temp_[0], kBufferStride_,
                           resi, resi_stride);
      break;
    case 4:
      if (height == 4 && is_luma_intra) {
        InvPartialDST4(shift2, &coeff_temp_[0], kBufferStride_, resi,
                       resi_stride);
      } else {
        InvPartialTransform4(shift2, height, &coeff_temp_[0], kBufferStride_,
                             resi, resi_stride);
      }
      break;
    case 8:
      InvPartialTransform8(shift2, height, &coeff_temp_[0], kBufferStride_,
                           resi, resi_stride);
      break;
    case 16:
      InvPartialTransform16(shift2, height, &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    case 32:
      InvPartialTransform32(shift2, height, &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    case 64:
      InvPartialTransform64(shift2, height, false,
                            &coeff_temp_[0], kBufferStride_,
                            resi, resi_stride);
      break;
    default:
      assert(0);
      break;
  }
}

void InverseTransform::InvPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int c[4];

  for (int i = 0; i < 4; i++) {
    c[0] = in[0] + in[2 * in_stride];
    c[1] = in[2 * in_stride] + in[3 * in_stride];
    c[2] = in[0] - in[3 * in_stride];
    c[3] = 74 * in[1 * in_stride];
    out[0] = util::Clip3((29 * c[0] + 55 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((55 * c[2] - 29 * c[1] + c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((74 * (in[0] - in[2 * in_stride] +
                                in[3 * in_stride]) + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((55 * c[0] + 29 * c[2] - c[3] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform2(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[1], E[1];

  for (int y = 0; y < lines; y++) {
    O[0] = kInvTransform2[1][0] * in[0 * in_stride] -
      kInvTransform2[1][0] * in[1 * in_stride];
    E[0] = kInvTransform2[0][0] * in[0 * in_stride] +
      kInvTransform2[0][0] * in[1 * in_stride];
    out[0] = util::Clip3((E[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[2], E[2];

  for (int y = 0; y < lines; y++) {
    O[0] = kInvTransform4[1][0] * in[1 * in_stride] +
      kInvTransform4[3][0] * in[3 * in_stride];
    O[1] = kInvTransform4[1][1] * in[1 * in_stride] +
      kInvTransform4[3][1] * in[3 * in_stride];
    E[0] = kInvTransform4[0][0] * in[0 * in_stride] +
      kInvTransform4[2][0] * in[2 * in_stride];
    E[1] = kInvTransform4[0][1] * in[0 * in_stride] +
      kInvTransform4[2][1] * in[2 * in_stride];
    out[0] = util::Clip3((E[0] + O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[1] = util::Clip3((E[1] + O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[2] = util::Clip3((E[1] - O[1] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    out[3] = util::Clip3((E[0] - O[0] + add) >> shift,
                         constants::kInt16Min, constants::kInt16Max);
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[4], E[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 4; k++) {
      O[k] = kInvTransform8[1][k] * in[1 * in_stride] +
        kInvTransform8[3][k] * in[3 * in_stride] +
        kInvTransform8[5][k] * in[5 * in_stride] +
        kInvTransform8[7][k] * in[7 * in_stride];
    }
    EO[0] = kInvTransform8[2][0] * in[2 * in_stride] +
      kInvTransform8[6][0] * in[6 * in_stride];
    EO[1] = kInvTransform8[2][1] * in[2 * in_stride] +
      kInvTransform8[6][1] * in[6 * in_stride];
    EE[0] = kInvTransform8[0][0] * in[0 * in_stride] +
      kInvTransform8[4][0] * in[4 * in_stride];
    EE[1] = kInvTransform8[0][1] * in[0 * in_stride] +
      kInvTransform8[4][1] * in[4 * in_stride];
    E[0] = EE[0] + EO[0];
    E[3] = EE[0] - EO[0];
    E[1] = EE[1] + EO[1];
    E[2] = EE[1] - EO[1];
    for (int k = 0; k < 4; ++k) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 4] = util::Clip3((E[3 - k] - O[3 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[8], E[8];
  int EO[4], EE[4];
  int EEO[2], EEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      O[k] = kInvTransform16[1][k] * in[in_stride]
        + kInvTransform16[3][k] * in[3 * in_stride]
        + kInvTransform16[5][k] * in[5 * in_stride]
        + kInvTransform16[7][k] * in[7 * in_stride]
        + kInvTransform16[9][k] * in[9 * in_stride]
        + kInvTransform16[11][k] * in[11 * in_stride]
        + kInvTransform16[13][k] * in[13 * in_stride]
        + kInvTransform16[15][k] * in[15 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EO[k] = kInvTransform16[2][k] * in[2 * in_stride]
        + kInvTransform16[6][k] * in[6 * in_stride]
        + kInvTransform16[10][k] * in[10 * in_stride]
        + kInvTransform16[14][k] * in[14 * in_stride];
    }
    EEO[0] = kInvTransform16[4][0] * in[4 * in_stride]
      + kInvTransform16[12][0] * in[12 * in_stride];
    EEE[0] = kInvTransform16[0][0] * in[0 * in_stride]
      + kInvTransform16[8][0] * in[8 * in_stride];
    EEO[1] = kInvTransform16[4][1] * in[4 * in_stride]
      + kInvTransform16[12][1] * in[12 * in_stride];
    EEE[1] = kInvTransform16[0][1] * in[0 * in_stride]
      + kInvTransform16[8][1] * in[8 * in_stride];
    for (int k = 0; k < 2; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 2] = EEE[1 - k] - EEO[1 - k];
    }
    for (int k = 0; k < 4; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 4] = EE[3 - k] - EO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 8] = util::Clip3((E[7 - k] - O[7 - k] + add) >> shift,
                               constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int O[16], E[16];
  int EO[8], EE[8];
  int EEO[4], EEE[4];
  int EEEO[2], EEEE[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      O[k] =
        kInvTransform32[1][k] * in[1 * in_stride] +
        kInvTransform32[3][k] * in[3 * in_stride] +
        kInvTransform32[5][k] * in[5 * in_stride] +
        kInvTransform32[7][k] * in[7 * in_stride] +
        kInvTransform32[9][k] * in[9 * in_stride] +
        kInvTransform32[11][k] * in[11 * in_stride] +
        kInvTransform32[13][k] * in[13 * in_stride] +
        kInvTransform32[15][k] * in[15 * in_stride] +
        kInvTransform32[17][k] * in[17 * in_stride] +
        kInvTransform32[19][k] * in[19 * in_stride] +
        kInvTransform32[21][k] * in[21 * in_stride] +
        kInvTransform32[23][k] * in[23 * in_stride] +
        kInvTransform32[25][k] * in[25 * in_stride] +
        kInvTransform32[27][k] * in[27 * in_stride] +
        kInvTransform32[29][k] * in[29 * in_stride] +
        kInvTransform32[31][k] * in[31 * in_stride];
    }

    for (int k = 0; k < 8; k++) {
      EO[k] =
        kInvTransform32[2][k] * in[2 * in_stride] +
        kInvTransform32[6][k] * in[6 * in_stride] +
        kInvTransform32[10][k] * in[10 * in_stride] +
        kInvTransform32[14][k] * in[14 * in_stride] +
        kInvTransform32[18][k] * in[18 * in_stride] +
        kInvTransform32[22][k] * in[22 * in_stride] +
        kInvTransform32[26][k] * in[26 * in_stride] +
        kInvTransform32[30][k] * in[30 * in_stride];
    }
    for (int k = 0; k < 4; k++) {
      EEO[k] =
        kInvTransform32[4][k] * in[4 * in_stride] +
        kInvTransform32[12][k] * in[12 * in_stride] +
        kInvTransform32[20][k] * in[20 * in_stride] +
        kInvTransform32[28][k] * in[28 * in_stride];
    }
    EEEO[0] = kInvTransform32[8][0] * in[8 * in_stride] +
      kInvTransform32[24][0] * in[24 * in_stride];
    EEEO[1] = kInvTransform32[8][1] * in[8 * in_stride] +
      kInvTransform32[24][1] * in[24 * in_stride];
    EEEE[0] = kInvTransform32[0][0] * in[0] +
      kInvTransform32[16][0] * in[16 * in_stride];
    EEEE[1] = kInvTransform32[0][1] * in[0] +
      kInvTransform32[16][1] * in[16 * in_stride];
    EEE[0] = EEEE[0] + EEEO[0];
    EEE[3] = EEEE[0] - EEEO[0];
    EEE[1] = EEEE[1] + EEEO[1];
    EEE[2] = EEEE[1] - EEEO[1];
    for (int k = 0; k < 4; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 4] = EEE[3 - k] - EEO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 8] = EE[7 - k] - EO[7 - k];
    }
    for (int k = 0; k < 16; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 16] = util::Clip3((E[15 - k] - O[15 - k] + add) >> shift,
                                constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
}

void
InverseTransform::InvPartialTransform64(int shift, int lines,
                                        bool zero_height,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[32], O[32];
  int EO[16], EE[16];
  int EEO[8], EEE[8];
  int EEEO[4], EEEE[4];
  int EEEEO[2], EEEEE[2];
  const int max_lines = zero_height ? 32 : 64;
  const int tx_lines = std::min(max_lines, lines);

  for (int y = 0; y < tx_lines; y++) {
    for (int k = 0; k < 32; k++) {
      O[k] =
        kInvTransform64[1][k] * in[1 * in_stride] +
        kInvTransform64[3][k] * in[3 * in_stride] +
        kInvTransform64[5][k] * in[5 * in_stride] +
        kInvTransform64[7][k] * in[7 * in_stride] +
        kInvTransform64[9][k] * in[9 * in_stride] +
        kInvTransform64[11][k] * in[11 * in_stride] +
        kInvTransform64[13][k] * in[13 * in_stride] +
        kInvTransform64[15][k] * in[15 * in_stride] +
        kInvTransform64[17][k] * in[17 * in_stride] +
        kInvTransform64[19][k] * in[19 * in_stride] +
        kInvTransform64[21][k] * in[21 * in_stride] +
        kInvTransform64[23][k] * in[23 * in_stride] +
        kInvTransform64[25][k] * in[25 * in_stride] +
        kInvTransform64[27][k] * in[27 * in_stride] +
        kInvTransform64[29][k] * in[29 * in_stride] +
        kInvTransform64[31][k] * in[31 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        O[k] +=
          kInvTransform64[33][k] * in[33 * in_stride] +
          kInvTransform64[35][k] * in[35 * in_stride] +
          kInvTransform64[37][k] * in[37 * in_stride] +
          kInvTransform64[39][k] * in[39 * in_stride] +
          kInvTransform64[41][k] * in[41 * in_stride] +
          kInvTransform64[43][k] * in[43 * in_stride] +
          kInvTransform64[45][k] * in[45 * in_stride] +
          kInvTransform64[47][k] * in[47 * in_stride] +
          kInvTransform64[49][k] * in[49 * in_stride] +
          kInvTransform64[51][k] * in[51 * in_stride] +
          kInvTransform64[53][k] * in[53 * in_stride] +
          kInvTransform64[55][k] * in[55 * in_stride] +
          kInvTransform64[57][k] * in[57 * in_stride] +
          kInvTransform64[59][k] * in[59 * in_stride] +
          kInvTransform64[61][k] * in[61 * in_stride] +
          kInvTransform64[63][k] * in[63 * in_stride];
      }
    }
    for (int k = 0; k < 16; k++) {
      EO[k] =
        kInvTransform64[2][k] * in[2 * in_stride] +
        kInvTransform64[6][k] * in[6 * in_stride] +
        kInvTransform64[10][k] * in[10 * in_stride] +
        kInvTransform64[14][k] * in[14 * in_stride] +
        kInvTransform64[18][k] * in[18 * in_stride] +
        kInvTransform64[22][k] * in[22 * in_stride] +
        kInvTransform64[26][k] * in[26 * in_stride] +
        kInvTransform64[30][k] * in[30 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EO[k] += kInvTransform64[34][k] * in[34 * in_stride] +
          kInvTransform64[38][k] * in[38 * in_stride] +
          kInvTransform64[42][k] * in[42 * in_stride] +
          kInvTransform64[46][k] * in[46 * in_stride] +
          kInvTransform64[50][k] * in[50 * in_stride] +
          kInvTransform64[54][k] * in[54 * in_stride] +
          kInvTransform64[58][k] * in[58 * in_stride] +
          kInvTransform64[62][k] * in[62 * in_stride];
      }
    }
    for (int k = 0; k < 8; k++) {
      EEO[k] =
        kInvTransform64[4][k] * in[4 * in_stride] +
        kInvTransform64[12][k] * in[12 * in_stride] +
        kInvTransform64[20][k] * in[20 * in_stride] +
        kInvTransform64[28][k] * in[28 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EEO[k] += kInvTransform64[36][k] * in[36 * in_stride] +
          kInvTransform64[44][k] * in[44 * in_stride] +
          kInvTransform64[52][k] * in[52 * in_stride] +
          kInvTransform64[60][k] * in[60 * in_stride];
      }
    }
    for (int k = 0; k < 4; k++) {
      EEEO[k] =
        kInvTransform64[8][k] * in[8 * in_stride] +
        kInvTransform64[24][k] * in[24 * in_stride];
      if (!constants::kZeroOutHighFreqLargeTransforms) {
        EEEO[k] += kInvTransform64[40][k] * in[40 * in_stride] +
          kInvTransform64[56][k] * in[56 * in_stride];
      }
    }
    EEEEO[0] = kInvTransform64[16][0] * in[16 * in_stride];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEO[0] += kInvTransform64[48][0] * in[48 * in_stride];
    }
    EEEEO[1] = kInvTransform64[16][1] * in[16 * in_stride];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEO[1] += kInvTransform64[48][1] * in[48 * in_stride];
    }
    EEEEE[0] = kInvTransform64[0][0] * in[0];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEE[0] += kInvTransform64[32][0] * in[32 * in_stride];
    }
    EEEEE[1] = kInvTransform64[0][1] * in[0];
    if (!constants::kZeroOutHighFreqLargeTransforms) {
      EEEEE[1] += kInvTransform64[32][1] * in[32 * in_stride];
    }
    EEEE[0] = EEEEE[0] + EEEEO[0];
    EEEE[1] = EEEEE[1] + EEEEO[1];
    EEEE[2] = EEEEE[1] - EEEEO[1];
    EEEE[3] = EEEEE[0] - EEEEO[0];
    for (int k = 0; k < 4; k++) {
      EEE[k] = EEEE[k] + EEEO[k];
      EEE[k + 4] = EEEE[3 - k] - EEEO[3 - k];
    }
    for (int k = 0; k < 8; k++) {
      EE[k] = EEE[k] + EEO[k];
      EE[k + 8] = EEE[7 - k] - EEO[7 - k];
    }
    for (int k = 0; k < 16; k++) {
      E[k] = EE[k] + EO[k];
      E[k + 16] = EE[15 - k] - EO[15 - k];
    }
    for (int k = 0; k < 32; k++) {
      out[k] = util::Clip3((E[k] + O[k] + add) >> shift,
                           constants::kInt16Min, constants::kInt16Max);
      out[k + 32] = util::Clip3((E[31 - k] - O[31 - k] + add) >> shift,
                                constants::kInt16Min, constants::kInt16Max);
    }
    in++;
    out += out_stride;
  }
  if (zero_height) {
    for (int y = tx_lines; y < lines; y++) {
      memset(out, 0, sizeof(Coeff) * 64);
      out += out_stride;
    }
  }
}

void ForwardTransform::Transform(int width, int height, bool is_luma_intra,
                                 const Residual *resi, ptrdiff_t resi_stride,
                                 Coeff *coeff, ptrdiff_t coeff_stride) {
  const int shift1 = util::SizeToLog2(width) + bitdepth_ - 9 +
    (width >= 64 || width == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (width) {
    case 2:
      FwdPartialTransform2(shift1, height, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 4:
      if (height == 4 && is_luma_intra) {
        FwdPartialDST4(shift1, resi, resi_stride, &coeff_temp_[0],
                       kBufferStride_);
      } else {
        FwdPartialTransform4(shift1, height, resi, resi_stride,
                             &coeff_temp_[0], kBufferStride_);
      }
      break;
    case 8:
      FwdPartialTransform8(shift1, height, resi, resi_stride,
                           &coeff_temp_[0], kBufferStride_);
      break;
    case 16:
      FwdPartialTransform16(shift1, height, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 32:
      FwdPartialTransform32(shift1, height, resi, resi_stride,
                            &coeff_temp_[0], kBufferStride_);
      break;
    case 64:
      if (constants::kZeroOutHighFreqLargeTransforms) {
        FwdPartialTransform64<false, true>(shift1, height, resi, resi_stride,
                                           &coeff_temp_[0], kBufferStride_);
      } else {
        FwdPartialTransform64<false, false>(shift1, height, resi, resi_stride,
                                            &coeff_temp_[0], kBufferStride_);
      }
      break;
    default:
      assert(0);
      break;
  }
  const int shift2 = util::SizeToLog2(height) + 6 +
    (height >= 64 || height == 2 ? constants::kTransformExtendedPrecision : 0);
  switch (height) {
    case 2:
      FwdPartialTransform2(shift2, width, &coeff_temp_[0], kBufferStride_,
                           coeff, coeff_stride);
      break;
    case 4:
      if (width == 4 && is_luma_intra) {
        FwdPartialDST4(shift2, &coeff_temp_[0], kBufferStride_,
                       coeff, coeff_stride);
      } else {
        FwdPartialTransform4(shift2, width, &coeff_temp_[0], kBufferStride_,
                             coeff, coeff_stride);
      }
      break;
    case 8:
      FwdPartialTransform8(shift2, width, &coeff_temp_[0], kBufferStride_,
                           coeff, coeff_stride);
      break;
    case 16:
      FwdPartialTransform16(shift2, width, &coeff_temp_[0], kBufferStride_,
                            coeff, coeff_stride);
      break;
    case 32:
      FwdPartialTransform32(shift2, width, &coeff_temp_[0], kBufferStride_,
                            coeff, coeff_stride);
      break;
    case 64:
      if (constants::kZeroOutHighFreqLargeTransforms) {
        FwdPartialTransform64<true, true>(shift2, width,
                                          &coeff_temp_[0], kBufferStride_,
                                          coeff, coeff_stride);
      } else {
        FwdPartialTransform64<false, false>(shift2, width,
                                            &coeff_temp_[0], kBufferStride_,
                                            coeff, coeff_stride);
      }
      break;
    default:
      assert(0);
      break;
  }
}

void ForwardTransform::FwdPartialDST4(int shift,
                                      const Coeff *in, ptrdiff_t in_stride,
                                      Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);

  for (int i = 0; i < 4; i++) {
    int c[4];
    c[0] = in[0] + in[3];
    c[1] = in[1] + in[3];
    c[2] = in[0] - in[1];
    c[3] = 74 * in[2];
    out[0 * out_stride] = (29 * c[0] + 55 * c[1] + c[3] + add) >> shift;
    out[1 * out_stride] = (74 * (in[0] + in[1] - in[3]) + add) >> shift;
    out[2 * out_stride] = (29 * c[2] + 55 * c[0] - c[3] + add) >> shift;
    out[3 * out_stride] = (55 * c[2] - 29 * c[1] + c[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform2(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[1], O[1];

  for (int y = 0; y < lines; y++) {
    E[0] = in[0] + in[1];
    O[0] = in[0] - in[1];
    out[0 * out_stride] = (kFwdTransform2[0][0] * E[0] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform2[1][0] * O[0] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform4(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[2], O[2];

  for (int y = 0; y < lines; y++) {
    E[0] = in[0] + in[3];
    E[1] = in[1] + in[2];
    O[0] = in[0] - in[3];
    O[1] = in[1] - in[2];
    out[0 * out_stride] = (kFwdTransform4[0][0] * E[0] +
                           kFwdTransform4[0][1] * E[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform4[2][0] * E[0] +
                           kFwdTransform4[2][1] * E[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform4[1][0] * O[0] +
                           kFwdTransform4[1][1] * O[1] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform4[3][0] * O[0] +
                           kFwdTransform4[3][1] * O[1] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform8(int shift, int lines,
                                       const Coeff *in, ptrdiff_t in_stride,
                                       Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[4], O[4];
  int EE[2], EO[2];

  for (int y = 0; y < lines; y++) {
    for (int x = 0; x < 4; x++) {
      E[x] = in[x] + in[7 - x];
      O[x] = in[x] - in[7 - x];
    }
    EE[0] = E[0] + E[3];
    EO[0] = E[0] - E[3];
    EE[1] = E[1] + E[2];
    EO[1] = E[1] - E[2];

    out[0 * out_stride] = (kFwdTransform8[0][0] * EE[0] +
                           kFwdTransform8[0][1] * EE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform8[4][0] * EE[0] +
                           kFwdTransform8[4][1] * EE[1] + add) >> shift;
    out[2 * out_stride] = (kFwdTransform8[2][0] * EO[0] +
                           kFwdTransform8[2][1] * EO[1] + add) >> shift;
    out[6 * out_stride] = (kFwdTransform8[6][0] * EO[0] +
                           kFwdTransform8[6][1] * EO[1] + add) >> shift;
    out[1 * out_stride] = (kFwdTransform8[1][0] * O[0] +
                           kFwdTransform8[1][1] * O[1] +
                           kFwdTransform8[1][2] * O[2] +
                           kFwdTransform8[1][3] * O[3] + add) >> shift;
    out[3 * out_stride] = (kFwdTransform8[3][0] * O[0] +
                           kFwdTransform8[3][1] * O[1] +
                           kFwdTransform8[3][2] * O[2] +
                           kFwdTransform8[3][3] * O[3] + add) >> shift;
    out[5 * out_stride] = (kFwdTransform8[5][0] * O[0] +
                           kFwdTransform8[5][1] * O[1] +
                           kFwdTransform8[5][2] * O[2] +
                           kFwdTransform8[5][3] * O[3] + add) >> shift;
    out[7 * out_stride] = (kFwdTransform8[7][0] * O[0] +
                           kFwdTransform8[7][1] * O[1] +
                           kFwdTransform8[7][2] * O[2] +
                           kFwdTransform8[7][3] * O[3] + add) >> shift;
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform16(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[8], O[8];
  int EE[4], EO[4];
  int EEE[2], EEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 8; k++) {
      E[k] = in[k] + in[15 - k];
      O[k] = in[k] - in[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EE[k] = E[k] + E[7 - k];
      EO[k] = E[k] - E[7 - k];
    }
    EEE[0] = EE[0] + EE[3];
    EEO[0] = EE[0] - EE[3];
    EEE[1] = EE[1] + EE[2];
    EEO[1] = EE[1] - EE[2];
    out[0 * out_stride] = (kFwdTransform16[0][0] * EEE[0] +
                           kFwdTransform16[0][1] * EEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform16[8][0] * EEE[0] +
                           kFwdTransform16[8][1] * EEE[1] + add) >> shift;
    out[4 * out_stride] = (kFwdTransform16[4][0] * EEO[0] +
                           kFwdTransform16[4][1] * EEO[1] + add) >> shift;
    out[12 * out_stride] = (kFwdTransform16[12][0] * EEO[0] +
                            kFwdTransform16[12][1] * EEO[1] + add) >> shift;
    for (int k = 2; k < 16; k += 4) {
      out[k*out_stride] = (kFwdTransform16[k][0] * EO[0] +
                           kFwdTransform16[k][1] * EO[1] +
                           kFwdTransform16[k][2] * EO[2] +
                           kFwdTransform16[k][3] * EO[3] + add) >> shift;
    }
    for (int k = 1; k < 16; k += 2) {
      out[k*out_stride] = (kFwdTransform16[k][0] * O[0] +
                           kFwdTransform16[k][1] * O[1] +
                           kFwdTransform16[k][2] * O[2] +
                           kFwdTransform16[k][3] * O[3] +
                           kFwdTransform16[k][4] * O[4] +
                           kFwdTransform16[k][5] * O[5] +
                           kFwdTransform16[k][6] * O[6] +
                           kFwdTransform16[k][7] * O[7] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

void
ForwardTransform::FwdPartialTransform32(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[16], O[16];
  int EE[8], EO[8];
  int EEE[4], EEO[4];
  int EEEE[2], EEEO[2];

  for (int y = 0; y < lines; y++) {
    for (int k = 0; k < 16; k++) {
      E[k] = in[k] + in[31 - k];
      O[k] = in[k] - in[31 - k];
    }
    for (int k = 0; k < 8; k++) {
      EE[k] = E[k] + E[15 - k];
      EO[k] = E[k] - E[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EEE[k] = EE[k] + EE[7 - k];
      EEO[k] = EE[k] - EE[7 - k];
    }
    EEEE[0] = EEE[0] + EEE[3];
    EEEO[0] = EEE[0] - EEE[3];
    EEEE[1] = EEE[1] + EEE[2];
    EEEO[1] = EEE[1] - EEE[2];
    out[0 * out_stride] = (kFwdTransform32[0][0] * EEEE[0] +
                           kFwdTransform32[0][1] * EEEE[1] + add) >> shift;
    out[16 * out_stride] = (kFwdTransform32[16][0] * EEEE[0] +
                            kFwdTransform32[16][1] * EEEE[1] + add) >> shift;
    out[8 * out_stride] = (kFwdTransform32[8][0] * EEEO[0] +
                           kFwdTransform32[8][1] * EEEO[1] + add) >> shift;
    out[24 * out_stride] = (kFwdTransform32[24][0] * EEEO[0] +
                            kFwdTransform32[24][1] * EEEO[1] + add) >> shift;
    for (int k = 4; k < 32; k += 8) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EEO[0] +
                           kFwdTransform32[k][1] * EEO[1] +
                           kFwdTransform32[k][2] * EEO[2] +
                           kFwdTransform32[k][3] * EEO[3] + add) >> shift;
    }
    for (int k = 2; k < 32; k += 4) {
      out[k*out_stride] = (kFwdTransform32[k][0] * EO[0] +
                           kFwdTransform32[k][1] * EO[1] +
                           kFwdTransform32[k][2] * EO[2] +
                           kFwdTransform32[k][3] * EO[3] +
                           kFwdTransform32[k][4] * EO[4] +
                           kFwdTransform32[k][5] * EO[5] +
                           kFwdTransform32[k][6] * EO[6] +
                           kFwdTransform32[k][7] * EO[7] + add) >> shift;
    }
    for (int k = 1; k < 32; k += 2) {
      out[k*out_stride] = (kFwdTransform32[k][0] * O[0] +
                           kFwdTransform32[k][1] * O[1] +
                           kFwdTransform32[k][2] * O[2] +
                           kFwdTransform32[k][3] * O[3] +
                           kFwdTransform32[k][4] * O[4] +
                           kFwdTransform32[k][5] * O[5] +
                           kFwdTransform32[k][6] * O[6] +
                           kFwdTransform32[k][7] * O[7] +
                           kFwdTransform32[k][8] * O[8] +
                           kFwdTransform32[k][9] * O[9] +
                           kFwdTransform32[k][10] * O[10] +
                           kFwdTransform32[k][11] * O[11] +
                           kFwdTransform32[k][12] * O[12] +
                           kFwdTransform32[k][13] * O[13] +
                           kFwdTransform32[k][14] * O[14] +
                           kFwdTransform32[k][15] * O[15] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
}

template<bool ZeroWdt, bool ZeroHgt>
void
ForwardTransform::FwdPartialTransform64(int shift, int lines,
                                        const Coeff *in, ptrdiff_t in_stride,
                                        Coeff *out, ptrdiff_t out_stride) {
  const int add = 1 << (shift - 1);
  int E[32], O[32];
  int EE[16], EO[16];
  int EEE[8], EEO[8];
  int EEEE[4], EEEO[4];
  int EEEEE[2], EEEEO[2];
  const int tx_lines = ZeroHgt ? 32 : 64;
  const int tx_cols = ZeroWdt ? std::min(32, lines) : lines;
  Coeff *orig_out = out;

  for (int y = 0; y < tx_cols; y++) {
    for (int k = 0; k < 32; k++) {
      E[k] = in[k] + in[63 - k];
      O[k] = in[k] - in[63 - k];
    }
    for (int k = 0; k < 16; k++) {
      EE[k] = E[k] + E[31 - k];
      EO[k] = E[k] - E[31 - k];
    }
    for (int k = 0; k < 8; k++) {
      EEE[k] = EE[k] + EE[15 - k];
      EEO[k] = EE[k] - EE[15 - k];
    }
    for (int k = 0; k < 4; k++) {
      EEEE[k] = EEE[k] + EEE[7 - k];
      EEEO[k] = EEE[k] - EEE[7 - k];
    }
    EEEEE[0] = EEEE[0] + EEEE[3];
    EEEEO[0] = EEEE[0] - EEEE[3];
    EEEEE[1] = EEEE[1] + EEEE[2];
    EEEEO[1] = EEEE[1] - EEEE[2];
    out[0 * out_stride] = (kFwdTransform64[0][0] * EEEEE[0] +
                           kFwdTransform64[0][1] * EEEEE[1] + add) >> shift;
    out[16 * out_stride] = (kFwdTransform64[16][0] * EEEEO[0] +
                            kFwdTransform64[16][1] * EEEEO[1] + add) >> shift;
    if (tx_lines > 32) {
      out[32 * out_stride] = (kFwdTransform64[32][0] * EEEEE[0] +
                              kFwdTransform64[32][1] * EEEEE[1] + add) >> shift;
      out[48 * out_stride] = (kFwdTransform64[48][0] * EEEEO[0] +
                              kFwdTransform64[48][1] * EEEEO[1] + add) >> shift;
    }
    for (int k = 8; k < tx_lines; k += 16) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EEEO[0] +
                           kFwdTransform64[k][1] * EEEO[1] +
                           kFwdTransform64[k][2] * EEEO[2] +
                           kFwdTransform64[k][3] * EEEO[3] + add) >> shift;
    }
    for (int k = 4; k < tx_lines; k += 8) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EEO[0] +
                           kFwdTransform64[k][1] * EEO[1] +
                           kFwdTransform64[k][2] * EEO[2] +
                           kFwdTransform64[k][3] * EEO[3] +
                           kFwdTransform64[k][4] * EEO[4] +
                           kFwdTransform64[k][5] * EEO[5] +
                           kFwdTransform64[k][6] * EEO[6] +
                           kFwdTransform64[k][7] * EEO[7] + add) >> shift;
    }
    for (int k = 2; k < tx_lines; k += 4) {
      out[k*out_stride] = (kFwdTransform64[k][0] * EO[0] +
                           kFwdTransform64[k][1] * EO[1] +
                           kFwdTransform64[k][2] * EO[2] +
                           kFwdTransform64[k][3] * EO[3] +
                           kFwdTransform64[k][4] * EO[4] +
                           kFwdTransform64[k][5] * EO[5] +
                           kFwdTransform64[k][6] * EO[6] +
                           kFwdTransform64[k][7] * EO[7] +
                           kFwdTransform64[k][8] * EO[8] +
                           kFwdTransform64[k][9] * EO[9] +
                           kFwdTransform64[k][10] * EO[10] +
                           kFwdTransform64[k][11] * EO[11] +
                           kFwdTransform64[k][12] * EO[12] +
                           kFwdTransform64[k][13] * EO[13] +
                           kFwdTransform64[k][14] * EO[14] +
                           kFwdTransform64[k][15] * EO[15] + add) >> shift;
    }
    for (int k = 1; k < tx_lines; k += 2) {
      out[k*out_stride] = (kFwdTransform64[k][0] * O[0] +
                           kFwdTransform64[k][1] * O[1] +
                           kFwdTransform64[k][2] * O[2] +
                           kFwdTransform64[k][3] * O[3] +
                           kFwdTransform64[k][4] * O[4] +
                           kFwdTransform64[k][5] * O[5] +
                           kFwdTransform64[k][6] * O[6] +
                           kFwdTransform64[k][7] * O[7] +
                           kFwdTransform64[k][8] * O[8] +
                           kFwdTransform64[k][9] * O[9] +
                           kFwdTransform64[k][10] * O[10] +
                           kFwdTransform64[k][11] * O[11] +
                           kFwdTransform64[k][12] * O[12] +
                           kFwdTransform64[k][13] * O[13] +
                           kFwdTransform64[k][14] * O[14] +
                           kFwdTransform64[k][15] * O[15] +
                           kFwdTransform64[k][16] * O[16] +
                           kFwdTransform64[k][17] * O[17] +
                           kFwdTransform64[k][18] * O[18] +
                           kFwdTransform64[k][19] * O[19] +
                           kFwdTransform64[k][20] * O[20] +
                           kFwdTransform64[k][21] * O[21] +
                           kFwdTransform64[k][22] * O[22] +
                           kFwdTransform64[k][23] * O[23] +
                           kFwdTransform64[k][24] * O[24] +
                           kFwdTransform64[k][25] * O[25] +
                           kFwdTransform64[k][26] * O[26] +
                           kFwdTransform64[k][27] * O[27] +
                           kFwdTransform64[k][28] * O[28] +
                           kFwdTransform64[k][29] * O[29] +
                           kFwdTransform64[k][30] * O[30] +
                           kFwdTransform64[k][31] * O[31] + add) >> shift;
    }
    in += in_stride;
    out++;
  }
  if (ZeroWdt) {
    Coeff *tmp = orig_out;
    for (int y = 0; y < tx_cols; y++) {
      memset(tmp + tx_lines, 0, sizeof(Coeff)*tx_lines);
      tmp += out_stride;
    }
  }
  if (ZeroHgt) {
    Coeff *tmp = orig_out + tx_lines * out_stride;
    for (int y = tx_lines; y < lines; y++) {
      std::memset(tmp, 0, sizeof(Coeff) * 64);
      tmp += out_stride;
    }
  }
}

ScanOrder TransformHelper::DetermineScanOrder(const CodingUnit &cu,
                                              YuvComponent comp) {
  static const int kSizeThreshold = 16;
  if (cu.GetPredMode() != PredictionMode::kIntra ||
      Restrictions::Get().disable_transform_adaptive_scan_order) {
    return ScanOrder::kDiagonal;
  }
  if (cu.GetWidth(YuvComponent::kY) >= kSizeThreshold ||
      cu.GetHeight(YuvComponent::kY) >= kSizeThreshold) {
    return ScanOrder::kDiagonal;
  }
  int intra_mode = static_cast<int>(cu.GetIntraMode(comp));
  if (std::abs(intra_mode - IntraMode::kVertical) < 5) {
    return ScanOrder::kHorizontal;
  }
  if (std::abs(intra_mode - IntraMode::kHorizontal) < 5) {
    return ScanOrder::kVertical;
  }
  return ScanOrder::kDiagonal;
}

void TransformHelper::DeriveSubblockScan(ScanOrder scan_order, int width,
                                         int height, uint16_t *scan_table) {
  int nbr_subblocks = width * height;
  int pos_x = 0;
  int pos_y = 0;
  if (scan_order == ScanOrder::kDiagonal) {
    for (int i = 0; i < nbr_subblocks; i++) {
      scan_table[i] = static_cast<uint16_t>(pos_y * width + pos_x);
      if ((pos_x == width - 1) || (pos_y == 0)) {
        pos_y += pos_x + 1;
        pos_x = 0;
        if (pos_y >= height) {
          pos_x += pos_y - (height - 1);
          pos_y = height - 1;
        }
      } else {
        pos_x++;
        pos_y--;
      }
    }
  } else if (scan_order == ScanOrder::kHorizontal) {
    for (int i = 0; i < nbr_subblocks; i++) {
      scan_table[i] = static_cast<uint16_t>(pos_y * width + pos_x);
      if (pos_x == width - 1) {
        pos_x = 0;
        pos_y++;
      } else {
        pos_x++;
      }
    }
  } else if (scan_order == ScanOrder::kVertical) {
    for (int i = 0; i < nbr_subblocks; i++) {
      scan_table[i] = static_cast<uint16_t>(pos_y * width + pos_x);
      if (pos_y == height - 1) {
        pos_x++;
        pos_y = 0;
      } else {
        pos_y++;
      }
    }
  }
}

}   // namespace xvc
